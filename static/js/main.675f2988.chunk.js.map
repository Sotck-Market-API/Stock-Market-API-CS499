{"version":3,"sources":["components/Button.js","components/LogoutButton.js","components/Navbar.js","components/HeroSection.js","components/Reasons.js","components/pages/iexapitoken.js","components/pages/DButton.js","components/pages/usermarketpage.js","components/pages/Home.js","components/Login_and_Register/Login.js","components/Login_and_Register/Register.js","components/CardItem.js","components/Cards.js","components/pages/Aboutus.js","components/pages/StockRow.js","components/pages/MarketData.js","components/Footer.js","components/pages/UserStockRow.js","components/pages/TransactionRow.js","components/pages/PortfolioDiversity.js","components/pages/UserWatchlist.js","components/pages/ProfilePage.js","components/GlobalState.js","components/pages/OptionsRow.js","components/pages/Options.js","components/pages/TransactionHistoryComponents/TransactionTableRow.js","components/pages/TransactionHistoryComponents/TransactionTable.js","components/pages/TransactionHistoryComponents/TransactionHistoryFilters.js","components/pages/TransactionHistoryPage.js","components/pages/RedditPageComponents/FeedItem.js","components/pages/RedditPageComponents/RedditFeed.js","components/pages/RedditPageComponents/RedditFeedFilters.js","components/pages/RedditPage.js","App.js","reportWebVitals.js","index.js"],"names":["STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","link","checkButtonStyle","includes","checkButtonSize","to","className","Parse","require","LogoutButton","props","useState","button","redirect","setRedirect","a","User","logOut","current","alert","message","Navbar","click","setClick","setButton","navbar","setNavbar","setButtonStyle","loggedIn","setloggedIn","closeMobileMenu","showButton","window","innerWidth","useEffect","addEventListener","changeBackground","event","location","pathname","scrollY","loginStatus","useCallback","currentUser","Fragment","class","id","dashboardDisplay","optionsDisplay","marketDirect","historyDisplay","redditDisplay","loginDisplay","HeroSection","src","autoPlay","loop","muted","Reasons","iexapitoken","api_token","base_url","DButton","color","text","style","backgroundColor","defaultProps","newimg_one","newimg_two","newimg_three","d","t","d_newtwo","t_newtwo","d_newthree","t_newthree","key","logo1","epocmonth","usermarketpage","state","data","logo","info","value","balanceDisplay","username","news","data4","news2","news3","stockChartXValues","stockChartYValues","watchlisted","handleChange","bind","handleSubmit","getUserBalance","getUsername","handleBuy","handleSell","addToWatchlist","removeFromWatchlist","isStockWatchlisted","buyCallOption","buyPutOption","optionprice","optionpricecalc","this","setState","target","componentDidMount","preventDefault","console","log","toString","pointerToThis","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","push","get","toFixed","fetchStockGraph","url","iex","urltwo","urlthree","urlfour","Promise","all","res1","res2","res3","res4","image","Date","datetime","toLocaleTimeString","toLocaleDateString","catch","error","toUpperCase","stockQuery","Query","equalTo","find","length","shares","prompt","price","latestPrice","balance","stockResult","stockObj","Object","set","parseInt","save","err","lastPrice","lastShares","result","sumStocks","newAveragePrice","Math","floor","newBalance","order_entry","destroy","strikeprice","round","stockprice","time","now","expire","parseFloat","onSubmit","onChange","companyName","industry","CEO","sector","high","low","volume","week52High","week52Low","marketCap","sign","change","ytdChange","description","x","y","mode","marker","layout","width","height","title","paper_bgcolor","plot_bgcolor","headline","source","summary","Component","Home","Login","user","setUser","pass","setPass","logIn","loggedInUser","required","e","name","placeholder","Register","userRegister","setuserRegister","passRegister","setpassRegister","confirmpassRegister","setconfirmpassRegister","emailRegister","setemailRegister","signUp","CardItem","path","label","alt","contact","Cards","Aboutus","latestime","StockRow","ticker","Response","latestUpdate","open","close","changePercent","MarketData","getData","Footer","UserStockRow","stockPrice","totalPrice","TransactionRow","transDate","orderType","buysell","effect","stock_amount","prices","PortfolioDiversity","graphdata","labels","stock","datasets","chartData","borderColor","borderWidth","hoverOffset","hoverBorderWidth","UserWatchlist","watchedstocks","setWatchedStocks","stocksLength","setStocksLength","stocks","count","OwnerQuery","first","Owner","portfolioQuery","queryResults","watchlistStocks","watchliststocks","i","String","displayWatchlist","ProfilePage","setBalance","setbalanceDisplay","account_value","set_account_value","stocks_value","set_stocks_value","total_gain_loss","set_total_gain_loss","setStocks","setstockPrice","setShares","setstocksLength","stock_curr_price","set_stock_curr_price","stockValue","setstockValue","profileDisplay","setprofileDisplay","setTransDate","setOrderType","setBuySell","setEffect","setTicker","setStockAmount","setPrices","transLength","setTransLength","floatbalance","roundedbalance","withdraw","floatwithdraw","totalbalance","deposit","floatdeposit","stockName","AveragePrice","sharesBought","currPrice","depositQuery","depositArr","totalDeps","row","withdrawalQuery","withArr","totalWiths","basis","transDateArr","orderTypeArr","buysellArr","effectArr","tickerArr","stock_amountArr","historyQuery","descending","limit","op_is_stock","eff","is_long","stockvals","res","calculatestockValue","getTransactionHistory","getUserStocks","getCurrPrices","stocksValue","values","equityValueDisplay","accountvalueDisplay","calcGainLoss","getstockValue","padding","fontFamily","displayChartData","profileStocks","stockDisplay","href","transHistoryDisplay","createGlobalState","optionsSold","useGlobalState","setGlobalState","OptionsRow","setData","setOptionsSold","epocday","outofthemoney","time_","amount","E","inthemoney","atthemoney","decayone","sin","temtime","confirm","option","strikePrice","optionPrice","expireDate","expiretime","getTime","oldstockprice","abs","timedecay","handleClick","sellCall","sellPut","onDoubleClick","priceBought","Options","setStock","setStrikePrice","setOptionPrice","setPriceBought","optionChoice","setOptionChoice","setExpireDate","stock_arr","strikePrice_arr","optionPrice_arr","priceBought_arr","optionChoice_arr","expireDate_arr","displayOptions","optionsList","getOptionsData","TransactionTableRow","transaction","date","buySell","Effect","Security","Amount","Price","TransactionTable","tHistory","map","index","TransactionHistoryFilters","onFilter","filterDeposit","setFilterDeposit","filterWithdraw","setFilterWithdraw","filterBuy","setFilterBuy","filterSell","setFilterSell","filterStock","setFilterStock","filterStockText","setFilterStockText","currentTarget","checked","disabled","TransactionHistoryPage","setTHistory","fullTHistory","setFullTHistory","getTHistory","fetchTHistory","retArr","tDate","tAmount","tSecurity","tprice","is_Stock","tEffect","stockText","newHistory","filter","FeedItem","post","textAlign","body","post_hint","post_url","is_video","media","reddit_video","fallback_url","controls","RedditFeed","postArray","RedditFeedFilters","OnSearch","OnHot","OnNew","OnTop","searchText","setSearchText","snoowrap","RedditPage","uAgent","setUAgent","postsArray","setPostsArray","random_num","generateRandomString","getTop","random","substr","getNew","r","userAgent","clientId","clientSecret","refreshToken","getSubreddit","subreddit","NewPosts","forEach","permalink","post_domain","domain","selftext","getHot","hotPosts","topPosts","getSearch","search","query","initialize","serverURL","App","basename","process","exact","component","Usermarketpage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.675f2988.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\nimport { Link } from 'react-router-dom';\n\n//creating a reusable button \n\nconst STYLES = ['btn--primary', 'btn--outline']; //btn--primary is the one that's filled while btn--outline is just outlined\nconst SIZES = ['btn--medium', 'btn--large'];\n\nexport const Button = ({children, type, onClick, buttonStyle, buttonSize,link}) => {\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0]; //if it has a buttonStyle keep the buttonStyle the same if not set it to the first option in our STYLES array\n\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0] //if the buttonsize already has a size return size if not make it medium button\n\n    return (\n        <Link to={link} className='btn-mobile'>\n            <button className={`btn ${checkButtonStyle} ${checkButtonSize}`} onClick={onClick} type={type}>\n                {children}\n            </button>\n        </Link>\n    )\n\n};","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Button } from './Button';\r\n\r\nconst Parse = require('parse/node');\r\n\r\nfunction LogoutButton(props) {\r\n    const [button, setButton] = useState(true);\r\n    const [buttonStyle, setButtonStyle] = useState(true);\r\n    const [redirect, setRedirect] = useState(false);\r\n    //const [loggedIn, setloggedIn] = useState(null);\r\n\r\n\r\n    /*\r\n    // Function that will return current user and also update current username\r\n    const getCurrentUser = async function () {\r\n        const currentUser = await Parse.User.current();\r\n\r\n        //Update loggedIn state with current user\r\n        setloggedIn(currentUser);\r\n        return currentUser;\r\n    };\r\n    */\r\n\r\n    async function handleLogout() {\r\n        try {\r\n            //Logout operation\r\n            await Parse.User.logOut();\r\n\r\n            //Verifies that user is logged out \r\n            const currentUser = await Parse.User.current();\r\n            if (currentUser === null) {\r\n                alert('You are logged out!');\r\n            }\r\n            setRedirect(true);\r\n        } catch (error) {\r\n            alert(`Error! ${error.message}`);\r\n        }\r\n\r\n    }\r\n    //Redirects to login page upon logging out\r\n    if (redirect) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {button && <Button onClick={handleLogout} buttonStyle={buttonStyle ? 'btn--outline' : 'btn--primary'} >Logout</Button>}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default LogoutButton;","import React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from './Button';\nimport { Link } from 'react-router-dom';\nimport LogoutButton from './LogoutButton';\nimport './Navbar.css';\n\nconst Parse = require('parse/node');\n\nfunction Navbar(props) {\n    const [click, setClick] = useState(false);\n    const [button, setButton] = useState(true);\n    const [navbar, setNavbar] = useState(false);\n    const [buttonStyle, setButtonStyle] = useState(true);\n    const [loggedIn, setloggedIn] = useState(false);\n\n    const handleClick = () => setClick(!click);\n    const closeMobileMenu = () => setClick(false);\n\n    const showButton = () => {\n        if (window.innerWidth <= 960) {\n            setButton(false);\n        } else {\n            setButton(true);\n        }\n    };\n\n    useEffect(() => {\n        showButton();\n    }, []);\n\n    window.addEventListener('resize', showButton);\n\n    const changeBackground = (event) => {\n        if (window.location.pathname == '/' || window.location.pathname == '/login' || window.location.pathname == '/register') {\n            if (window.location.pathname.includes('/') && window.scrollY >= 80) {\n                setNavbar(true);\n                setButtonStyle(false);\n            }\n            else {\n                setNavbar(false);\n                setButtonStyle(true);\n            }\n        }\n\n        else {\n            setNavbar(true);\n            setButtonStyle(false);\n        }\n\n    }\n\n    window.addEventListener('click', changeBackground);\n    window.addEventListener('load', changeBackground);\n    window.addEventListener('scroll', changeBackground);\n    window.addEventListener('mouseover', changeBackground);\n\n    //Checks if a user is logged in or not\n    //Sets loggedIn state to true if user is found\n    const loginStatus = useCallback(async () => {\n        const currentUser = await Parse.User.current();\n\n        if (currentUser !== null) {\n            setloggedIn(true);\n        }\n        else {\n            setloggedIn(false);\n        }\n    },[navbar])\n\n    useEffect(() => {\n        loginStatus();\n    }, [loginStatus]);\n\n    function loginButton() {\n        return button && <Button link='/login' buttonStyle={buttonStyle ? 'btn--outline' : 'btn--primary'} >Login / Signup</Button>;\n    }\n\n    //Changes button display to either login or logout \n    //depending if user is logged in or not\n    function loginDisplay(loggedIn) {\n        if (!loggedIn) {\n            return loginButton();\n        } else {\n            return <LogoutButton />;\n        }\n    }\n\n    function profileDisplay(loggedIn) {\n        if (!loggedIn) {\n            return null;\n        } else {\n            return <Link\n                to='/profile'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                Profile\n                            </Link>;\n        }\n    }\n\n    function dashboard() {\n        return <li className='nav-item'> <Link\n            to='/profile'\n            className='nav-links'\n            onClick={closeMobileMenu}\n        >\n            <i class=\"far fa-user-circle profileIcon\"></i>  \n        </Link>\n        </li>\n    }\n\n    function dashboardDisplay(loggedIn) {\n        if (!loggedIn) {\n            return null;\n        } else {\n            return dashboard();\n        }\n    }\n\n    function marketDirect(loggedIn) {\n        if (!loggedIn) {\n            return <Link\n                to='/market'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                Market\n            </Link>\n\n        } else {\n            return <Link\n                to='/usermarketpage'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                Market\n            </Link>\n        }\n    }\n\n    function historyDisplay(loggedIn) {\n        if (!loggedIn) {\n            return null\n\n        } else {\n            return <Link\n                to='/history'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                History\n            </Link>\n        }\n    }\n\n    function redditDisplay(loggedIn) {\n        if (!loggedIn) {\n            return null\n\n        } else {\n            return <Link\n                to='/reddit'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                Reddit\n            </Link>\n        }\n    }\n\n    function optionsDisplay(loggedIn) {\n        if (!loggedIn) {\n            return null\n\n        } else {\n            return <Link\n                to='/options'\n                className='nav-links'\n                onClick={closeMobileMenu}\n            >\n                Options\n            </Link>\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <nav className={navbar ? 'navbar active' : 'navbar'}>\n                <div className='navbar-container'>\n                    <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\n                        Stock-Mocket&nbsp;&nbsp;\n            <i class='fas fa-chart-line' />\n                    </Link>\n                    <div className='menu-icon' onClick={handleClick}>\n                        <i className={click ? 'fas fa-times' : 'fas fa-bars'} />\n                    </div>\n                    <ul className={click ? 'nav-menu active' : 'nav-menu'}>\n                        <u1 id=\"para\">\n                            {dashboardDisplay(loggedIn)}\n                        </u1>\n                        <li className='nav-item'>\n                            {optionsDisplay(loggedIn)}\n                        </li>\n                        <li className='nav-item'>\n                            {marketDirect(loggedIn)}\n                        </li>\n                        <li className='nav-item'>\n                            {historyDisplay(loggedIn)}\n                        </li>\n                        <li className='nav-item'>\n                            {redditDisplay(loggedIn)}\n                        </li>\n                        <li className='nav-item'>\n                            <Link\n                                to='/aboutus'\n                                className='nav-links'\n                                onClick={closeMobileMenu}\n                            >\n                                AboutUs\n                            </Link>\n                        </li>\n                    </ul>\n                    <u1 id=\"para\">\n                        {loginDisplay(loggedIn)}\n                    </u1>\n                </div>\n            </nav>\n        </React.Fragment>\n    );\n}\n\nexport default Navbar;","import React, { useState, useEffect, useCallback } from 'react';\nimport '../App.css';\nimport { Button } from './Button';\nimport './HeroSection.css';\nimport { Link } from 'react-router-dom';\n\nconst Parse = require('parse/node');\n\n\nfunction HeroSection() {\n    const [loggedIn, setloggedIn] = useState(false);\n\n    const loginStatus = useCallback(async () => {\n        const currentUser = await Parse.User.current();\n\n        if (currentUser !== null) {\n            setloggedIn(true);\n        }\n        else {\n            setloggedIn(false);\n        }\n    },[])\n\n    useEffect(() => {\n        loginStatus();\n    }, [loginStatus]);\n\n\n    function notLoggedin(){\n        return (<Button link='/login' className='btns' buttonStyle='btn--primary' buttonSize='btn--large'>\n        GET STARTED <i class=\"fas fa-angle-double-right\"></i>\n    </Button>)\n    }\n\n    function Loggedin(){\n        return (<Button link='/profile' className='btns' buttonStyle='btn--primary' buttonSize='btn--large'>\n        GO TO PROFILE <i class=\"far fa-address-card\"></i>\n    </Button>)\n    }\n\n    function loginDisplay(loggedIn) {\n        if (!loggedIn) {\n            return notLoggedin();\n        } else {\n            return Loggedin();\n        }\n    }\n\n    return (\n        <div className='hero-container'>\n            <video src=\"/videos/video-1.mp4\" autoPlay loop muted />\n            <h1>Welcome to paper trading</h1>\n            <p>Fake it till you make it!</p>\n            <div className=\"hero-btns\">\n                <Button link='/market' className='btns' buttonStyle='btn--outline' buttonSize='btn--large'>\n                    MARKET DATA <i class=\"fas fa-info-circle\"></i>\n                </Button>\n                {loginDisplay(loggedIn)}\n            </div>\n            <p id=\"arrow\"><i class=\"fas fa-angle-double-down\"></i></p>\n        </div>\n    )\n}\n\nexport default HeroSection","import React from 'react'\nimport './Reasons.css'\nfunction Reasons() {\n    return (\n        <div>\n        <div className =\"lp1container1\">\n        <div className = \"lptitle\"> <h1> Why Stock Mocket?</h1></div>\n        <div className = \"lpreasons\"> \n        <div className = \"lpreasonbox\"> \n       <div>  <img src='./Images/secure-data .png' className = \"iconsize\"/> </div> \n       <div className = \"titledesc\"> <h1> Secure </h1>  </div> \n        <div className = \"desc\" > Trade with confidence knowing that your data is secure.</div>\n         </div>\n        <div className = \"lpreasonbox\">\n        <div>  <img src='./images/fast.png' className = \"iconsize\"/> </div> \n        <div className = \"titledesc\"><h1> Fast </h1>  </div> \n        <div className = \"desc\" > Power by Industry Leading Data </div></div>\n        <div className = \"lpreasonbox\"> \n        <div>  <img src='./images/free .png' className = \"iconsize\"/> </div> \n        <div className = \"titledesc\"><h1> Free </h1>  </div> \n        <div className = \"desc\"> Risk Free Trading. Why risk your hard own money</div></div>\n\n        </div>\n        \n    </div>\n    <div className ='lpcontainer2'>  \n    <div className = \"box1\"> <img src =\" ./Images/reasons.png\" /> </div>\n    <div className = \"box2\">  \n    <h1> Trade with Confidence </h1>\n    <div className= 'box3'> Over the past two years, if we’ve learned anything, it is that people suckat investing. Many individuals blew their Covid-relief money on stocks that tanked. Others threw their hopes into stocks that grew rapidly near the end of quarantine, but later tanked because they didn’t realize they had to sell their stock afterwards. \nAs more people are indulged with trading stocks, there is need to educate those on properly trading stocks. We envision a web-app that will properly teach such individuals on the basics of stock trading using fake money so users can freely experiment with trading without risking real income.\n</div>\n     </div>\n     </div>\n    <div className ='lpcontainer3'>  \n        <h1> Get Started In Three Easy Steps</h1> \n    <div className ='container3steps'> \n    <div className = \"stepone\">  <div  className = 'wrapper'> <img src = './Images/1.png' />  </div>\n     Create Your Free Account\n     </div>\n     <div className = \"stepone\">  <div  className = 'wrapper'> <img src = './Images/2.png' />  </div>\n     Step Up Your Experience\n     </div>\n     <div className = \"stepone\">  <div  className = 'wrapper'> <img src = './Images/3.png' />  </div>\n     Start  Trading Instantly\n     </div>\n    </div>\n     </div>\n    </div>\n    )\n}\n\nexport default Reasons","const iexapitoken = {\napi_token: 'pk_02664240d6f74d10a229029334163bc5 ',\nbase_url: 'https://cloud.iexapis.com/stable'\n\n};\nexport default iexapitoken;\n","import PropTypes from 'prop-types'\nimport \"./DButton.css\"\n\nconst DButton = ({color, text, onClick}) => {\n\n    return (\n    <button \n        onClick={onClick} \n        style={{backgroundColor : color}}\n        className = \"Dbtn\"> \n        {text}\n    </button>\n    )\n\n}\n\nDButton.defaultProps = {\n    color: 'silver'\n\n}\n\nDButton.propTypes = {\n    text: PropTypes.string,\n    color: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nexport default DButton","import Plot from 'react-plotly.js';\nimport React, { Component } from \"react\";\nimport iex from './iexapitoken.js'\nimport \"./usermarketpage.css\"\nimport DButton from './DButton.js';\nconst Parse = require('parse/node');\n\nvar logo1, newimg_one, newimg_two, newimg_three;\nvar key1 = \"tsla\"\nvar key = \"googl\";\nvar logo1 = '';\nvar s = '';\nvar d,t , d_newtwo, t_newtwo , d_newthree, t_newthree;\nvar epocmonth = 2629743000;\nconst BarStyling = {width:\"40rem\",background:\"#F2F1F9\", border:\"none\", padding:\"0.5rem\"};\n\nclass usermarketpage extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {}, logo: [], info: {}, value: 'tsla', balanceDisplay: [], username: [], news : {} , data4: [],\n            news2: {},\n            news3: {}, stockChartXValues: [], stockChartYValues: [],\n            watchlisted: null\n           \n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getUserBalance = this.getUserBalance(this);\n        this.getUsername = this.getUsername(this);\n        this.handleBuy = this.handleBuy.bind(this);\n        this.handleSell = this.handleSell.bind(this);\n        this.addToWatchlist = this.addToWatchlist.bind(this);\n        this.removeFromWatchlist = this.removeFromWatchlist.bind(this);\n        this.isStockWatchlisted = this.isStockWatchlisted.bind(this);\n        this.buyCallOption = this.buyCallOption.bind(this);\n        this.buyPutOption = this.buyPutOption.bind(this);\n        this.optionprice = this.optionprice.bind(this);\n        this.optionpricecalc = this.optionpricecalc.bind(this);\n\n\n    }\n    handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n  \n    handleSubmit(event) {\n        this.componentDidMount();\n        event.preventDefault();\n      console.log(this.state.value);\n    }\n    fetchStockGraph(){\n        key = this.state.value.toString();\n        const pointerToThis = this;\n        console.log(pointerToThis);\n        const API_KEY = 'YAB9H6YWJ71GXX22';\n        let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${key}&outputsize=compact&apikey=YAB9H6YWJ71GXX22`;\n        let stockChartXValuesFunction = [];\n        let stockChartYValuesFunction = [];\n    \n        fetch(API_Call)\n          .then(\n            function(response) {\n              return response.json();\n            }\n          )\n          .then(\n            function(data4) {\n              console.log(data4);\n              console.log('data4');\n    \n              for (var key in data4['Time Series (Daily)']) {\n                stockChartXValuesFunction.push(key);\n                stockChartYValuesFunction.push(data4['Time Series (Daily)'][key]['4. close']);\n              }\n    \n              // console.log(stockChartXValuesFunction);\n              console.log(stockChartYValuesFunction);\n              pointerToThis.setState({\n                stockChartXValues: stockChartXValuesFunction,\n                stockChartYValues: stockChartYValuesFunction\n              });\n            }\n          )\n    }\n    async getUserBalance() {\n        try {\n            const currentUser = await Parse.User.current();\n            this.setState({\n                balanceDisplay: currentUser.get('balance').toFixed(2)\n            });\n        }\n\n        catch (err) {\n            //alert(\"Please login\");\n            console.log(\"not logged in\");\n        }\n    }\n\n    async getUsername() {\n        try {\n            const currentUser = await Parse.User.current();\n            this.setState({\n                username: currentUser.get('username')\n            });\n        }\n\n        catch (err) {\n            //alert(\"Please login\");\n            console.log(\"not logged in\");\n        }\n    }\n\ncomponentDidMount() {\n    this.fetchStockGraph();\n    this.isStockWatchlisted();\n\n    //Loads default stock data when accessing this page through the navbar or login redirect \n    if ((typeof this.props.location.state == 'undefined' || this.props.location.state.value == null)) {\n        key = this.state.value.toString();\n    }\n\n    //If page was accessed by clicking a table ticker symbol,\n    //loads the clicked ticker's data\n    else {\n        this.setState({\n            value: this.props.location.state.value\n        });\n        key = this.props.location.state.value.toString();\n    }\n        const url = `${iex.base_url}/stock/${key}/quote/?&token=${iex.api_token}`\n        const urltwo = `${iex.base_url}/stock/${key}/company/?&token=${iex.api_token}`\n        const urlthree = `${iex.base_url}/stock/${key}/logo/?&token=${iex.api_token}`\n        const urlfour= `${iex.base_url}/stock/${key}/news/last/${'4'}/?&token=${iex.api_token}`\n        // const urlfive= `${iex.base_url}/time-series/news/${this.state.value.toString()}range=last-week&limit=10/?&token=${iex.api_token}`\n        Promise.all([fetch(url), fetch(urltwo) ,fetch(urlthree), fetch(urlfour)])\n        .then(([res1, res2, res3,res4]) => { \n            return Promise.all([res1.json(), res2.json(), res3.json(), res4.json()]) \n         })\n         .then(([res1, res2, res3,res4 ]) => {\n            logo1 = (res3.url).toString(); \n            newimg_one = (res4[0].image).toString();\n            newimg_two = (res4[1].image).toString();\n            newimg_three = (res4[2].image).toString();\n            console.log('test1111')\n            \n \n             t = new Date(res4[0].datetime).toLocaleTimeString(\"en-US\")\n             d = new Date(res4[0].datetime).toLocaleDateString(\"en-US\")\n           \n            t_newtwo  = new Date(res4[1].datetime).toLocaleTimeString(\"en-US\")\n             d_newtwo = new Date(res4[1].datetime).toLocaleDateString(\"en-US\")\n            \n             t_newthree  = new Date(res4[1].datetime).toLocaleTimeString(\"en-US\")\n              d_newthree = new Date(res4[1].datetime).toLocaleDateString(\"en-US\")\n           this.setState({\n               data : res1,\n               info : res2,\n               logo : res3,\n              \n               news : res4[0],\n               news2 : res4[1],\n               news3 : res4[2],\n              \n           })\n         }).catch(error => {\n            \n          });\n    }\n\n    //Checks if current stock is watchlisted or not\n    async isStockWatchlisted() {\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            //Finds watchlisted stock owned by user\n            const stockQuery = new Parse.Query('Watchlist');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //Stock is not watchlisted\n            if (stockResult.length == 0) {\n                this.setState({\n                    watchlisted: false\n                });\n                console.log(\"not a watchlisted stock\");\n            }\n\n            //Stock is watchlisted\n            else {\n                this.setState({\n                    watchlisted: true\n                });\n                console.log(\"watchlisted stock\");\n            }\n        }\n\n        catch {\n            console.log(\"Could not get watchlisted stocks\");\n        }\n    }\n\n    async handleBuy() {\n        const shares = prompt('Buy shares'); //Number of shares inputted saved to sharedAmount upon prompt submission\n        const price = this.state.data.latestPrice; //Current price\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        console.log(\"Shares to buy: \", shares);\n\n        try {\n            const currentUser = await Parse.User.current();\n            var balance = currentUser.get('balance');\n\n            const stockQuery = new Parse.Query('Portfolio')\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            console.log(\"result: \", stockResult);\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                var stockObj = new Parse.Object('Portfolio');\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n                stockObj.set('AveragePrice', price);\n                stockObj.set('sharesBought', parseInt(shares));\n                \n                try {\n                    console.log(\"try now\");\n                    stockObj.save();\n                    console.log('saving the stock success!')\n                } catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n            else {\n                var lastPrice = 0;\n                var lastShares = 0;\n\n                for (let result of stockResult) {\n                    var stockObj = result;\n                    lastPrice = result.get('AveragePrice');\n                    lastShares = result.get('sharesBought');\n                }\n\n                var sumStocks = (lastShares * lastPrice) + (price * parseInt(shares));\n                var newAveragePrice = Math.floor((sumStocks / (lastShares + parseInt(shares))) * 100) / 100;\n\n                stockObj.set('AveragePrice', newAveragePrice);\n                stockObj.set('sharesBought', parseInt(lastShares) + parseInt(shares));\n\n                try {\n                    stockObj.save();\n                    console.log('else saving the stock success!');\n                } catch (err) {\n                    console.log(err.message);\n                }\n\n            }\n\n            var newBalance = balance - (price * parseInt(shares));\n            currentUser.set('balance', newBalance);\n            try {\n                currentUser.save();\n                console.log('saving user balance success!');\n            }\n            catch (err) {\n                console.log(err.message);\n            }\n            \n            //generate the transaction\n            var order_entry = new Parse.Object('Order');\n            order_entry.set('transDate', new Date());\n            order_entry.set('isStockOperation', true);\n            order_entry.set('isBuy', true);\n            order_entry.set('isOpenPos', true);\n            order_entry.set('ticker', key);\n            order_entry.set('amount', parseInt(shares));\n            order_entry.set('price', price);\n            order_entry.set('account', currentUser);\n            try {\n                order_entry.save();\n            }\n            catch (err) {\n                console.log(err.message);\n            }\n\n            console.log(\"Shares bought: \", shares);\n        }\n\n        catch (err) {\n            alert(\"Please log in to buy shares\");\n        }\n    }\n\n\n    async handleSell() {\n        const shares = prompt('Sell shares'); //Number of shares inputted saved to sharedAmount upon prompt submission\n        const price = this.state.data.latestPrice; //Current price\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        console.log(\"Shares to sell: \", parseInt(shares));\n\n        try {\n            const currentUser = await Parse.User.current();\n            var balance = currentUser.get('balance');\n\n            const stockQuery = new Parse.Query('Portfolio');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are recieved\n            if (stockResult.length == 0) {\n                console.log('That stock does not exist');\n            }\n\n            else {\n                var lastShares = 0;\n\n                for (let result of stockResult) {\n                    var stockObj = result;\n                    var lastShares = result.get('sharesBought');\n                }\n\n                stockObj.set('AveragePrice', stockObj.get('AveragePrice'));\n                stockObj.set('sharesBought', (parseInt(lastShares) - parseInt(shares)));\n\n                //delete the object if you sell all of it\n                if ((lastShares - parseInt(shares)) <= 0) {\n                    try {\n                        stockObj.destroy();\n                        //console.log('Deleting the stock success!');\n                    } catch (err) {\n                        console.log(err.message);\n                    }\n                }\n\n                else {\n                    try {\n                        stockObj.save();\n                        console.log('else selling the stock success!');\n                    } catch (err) {\n                        console.log(err.message);\n                    }\n                }\n            }\n\n            var newBalance = balance + (price * parseInt(shares));\n            currentUser.set('balance', newBalance);\n            try {\n                currentUser.save();\n                console.log('saving user balance success!');\n            } catch (err) {\n                console.log(err.message);\n            }\n            \n            //generate the transaction\n            var order_entry = new Parse.Object('Order');\n            order_entry.set('transDate', new Date());\n            order_entry.set('isStockOperation', true);\n            order_entry.set('isBuy', false);\n            order_entry.set('isOpenPos', false);\n            order_entry.set('ticker', key);\n            order_entry.set('amount', parseInt(shares));\n            order_entry.set('price', price);\n            order_entry.set('account', currentUser);\n            try {\n                order_entry.save();\n            }\n            catch (err) {\n                console.log(err.message);\n            }\n\n            console.log(\"Shares sold: \", shares);\n        }\n\n        catch (err) {\n            alert(\"Please log in to sell shares\");\n        }\n    }\n\n    optionprice(strikeprice) {\n        return Math.round((strikeprice) * .10);\n    }\n    optionpricecalc(stockprice, strikeprice) {\n        return (strikeprice - stockprice) * 100;\n    }\n\n    //Buy call option\n    async buyCallOption() {\n        const strikeprice = prompt('Enter strikeprice');\n        this.optionprice(strikeprice, this.state.data.latestPrice);\n        if(strikeprice == null || (typeof strikeprice) == \"undefined\" || strikeprice == 0){\n            alert(\"Invalid StrikePrice\")\n            return\n        }\n        //const priceOfoption = prompt('Option Price = ' + this.optionprice(strikeprice));\n        alert('Option Price bought at ' + this.optionprice(strikeprice));\n        const time = Date.now();\n        const expire = time + epocmonth;\n        alert(\"Buy Date = \" + new Date(time).toLocaleDateString(\"en-US\") + \" Date Expire = \" + new Date(expire).toLocaleDateString(\"en-US\"));\n\n        \n        key = key.toUpperCase();\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            const stockQuery = new Parse.Query('Options')\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            stockQuery.equalTo('expireDate', expire);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                var stockObj = new Parse.Object('Options');\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n                stockObj.set('strikePrice', parseFloat(strikeprice));\n                stockObj.set('initialOptionPrice', this.optionprice(strikeprice));\n                stockObj.set('boughtPrice', parseFloat(this.state.data.latestPrice)); \n                stockObj.set('expireDate', new Date(expire));\n                stockObj.set('callOrPut', \"Call\");\n\n                try {\n                    console.log(\"try now\");\n                    stockObj.save();\n                    console.log('saving the stock success!')\n\n                    var newBalance = parseFloat(currentUser.get('balance')) - strikeprice * .1;\n                    currentUser.set('balance', parseFloat(newBalance));\n\n                    this.setState({\n                        balanceDisplay: newBalance\n                    });\n\n                    try {\n                        currentUser.save();\n                    }\n                    catch (err) {\n                        console.log(\"Could not save bought call option\");\n                    }\n\n                } catch (err) {\n                    console.log(err.message);\n                }\n\n            }\n\n            else {\n                console.log(\"Option exists\")\n            }\n            console.log(\"result: \", stockResult);\n        }\n        catch (err) {\n            console.log(\"Error buying call option\");\n        }\n    }\n\n    //Buy put option\n    async buyPutOption() {\n        const strikeprice = prompt('Enter strikeprice');\n        if(strikeprice == null || (typeof strikeprice) == \"undefined\" || strikeprice == 0){\n            alert(\"Invalid StrikePrice\")\n            return\n        }\n        this.optionprice(strikeprice, this.state.data.latestPrice);\n        //const priceOfoption = prompt('Option Price = ' + this.optionprice(strikeprice)); //price of the option the user brought\n        alert('Option Price bought at ' + this.optionprice(strikeprice));\n        const time = Date.now();\n        const expire = time + epocmonth; // this is when the option expires. \n        alert(\"Buy Date = \" + new Date(time).toLocaleDateString(\"en-US\") + \" Date Expire = \" + new Date(expire).toLocaleDateString(\"en-US\"));\n\n        key = key.toUpperCase();\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            const stockQuery = new Parse.Query('Options')\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            stockQuery.equalTo('expireDate', expire);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                var stockObj = new Parse.Object('Options');\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n                stockObj.set('strikePrice', parseFloat(strikeprice));\n                stockObj.set('initialOptionPrice', this.optionprice(strikeprice));\n                stockObj.set('boughtPrice', parseFloat(this.state.data.latestPrice)); \n                stockObj.set('expireDate', new Date(expire));\n                stockObj.set('callOrPut', \"Put\");\n\n                try {\n                    console.log(\"try now\");\n                    stockObj.save();\n                    console.log('saving the stock success!')\n\n                    var newBalance = currentUser.get('balance') - strikeprice * .1;\n                    currentUser.set('balance', parseFloat(newBalance));\n\n                    this.setState({\n                        balanceDisplay: newBalance\n                    })\n\n                    try {\n                        currentUser.save();\n                    }\n                    catch (err) {\n                        console.log(\"Could not save bought put option\");\n                    }\n                } catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n            else {\n                console.log(\"Option exists\")\n            }\n\n            console.log(\"result: \", stockResult);\n        }\n        catch (err) {\n            console.log(\"Error buying put option\");\n        }\n\n    }\n    \n    async addToWatchlist() {\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            //Finds watchlisted stock owned by user\n            const stockQuery = new Parse.Query('Watchlist');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                var stockObj = new Parse.Object('Watchlist');\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n\n                //Add stock to watchlist\n                try {\n                    stockObj.save();\n                    this.setState({\n                        watchlisted: true\n                    });\n                    alert(key + \" has been added to your watchlist\");\n                }\n                catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n            else {\n                alert(key + \" is already in your watchlist\");\n            }\n        }\n        catch (err) {\n            alert(\"Could not add to watchlist\")\n        }\n    }\n\n    async removeFromWatchlist() {\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            //Finds watchlisted stock owned by user\n            const stockQuery = new Parse.Query('Watchlist');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //Stock not found in watchlist\n            if (stockResult.length == 0) {\n                alert(\"Cannot remove a stock that is not in your watchlist\")\n            }\n\n            //Remove stock from watchlist\n            else {\n                for (let result of stockResult) {\n                    var stockObj = result;\n                }\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n\n                try {\n                    stockObj.destroy();\n                    this.setState({\n                        watchlisted: false\n                    });\n                    alert(key + \" has been removed from your watchlist\");\n                }\n                catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n        }\n        catch (err) {\n            alert(\"Could not remove from watchlist\")\n        }\n    }\n\n    async addToWatchlist() {\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            //Finds watchlisted stock owned by user\n            const stockQuery = new Parse.Query('Watchlist');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                var stockObj = new Parse.Object('Watchlist');\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n\n                //Add stock to watchlist\n                try {\n                    stockObj.save();\n                    this.setState({\n                        watchlisted: true\n                    });\n                    alert(key + \" has been added to your watchlist\");\n                }\n                catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n            else {\n                alert(key + \" is already in your watchlist\");\n            }\n        }\n        catch (err) {\n            alert(\"Could not add to watchlist\")\n        }\n    }\n\n    async removeFromWatchlist() {\n        key = key.toUpperCase(); //Ticker to be saved as all upper case letters only\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            //Finds watchlisted stock owned by user\n            const stockQuery = new Parse.Query('Watchlist');\n            stockQuery.equalTo('stockOwner', currentUser);\n            stockQuery.equalTo('stockName', key);\n            const stockResult = await stockQuery.find();\n\n            //Stock not found in watchlist\n            if (stockResult.length == 0) {\n                alert(\"Cannot remove a stock that is not in your watchlist\")\n            }\n\n            //Remove stock from watchlist\n            else {\n                for (let result of stockResult) {\n                    var stockObj = result;\n                }\n                stockObj.set('stockOwner', currentUser);\n                stockObj.set('stockName', key);\n\n                try {\n                    stockObj.destroy();\n                    this.setState({\n                        watchlisted: false\n                    });\n                    alert(key + \" has been removed from your watchlist\");\n                }\n                catch (err) {\n                    console.log(err.message);\n                }\n            }\n\n        }\n        catch (err) {\n            alert(\"Could not remove from watchlist\")\n        }\n    }\n\nrender() {\n    return(\n        <div className=\"uncontainer\">\n            <div className =\"usergreeting\">\n                <h1 className = \"namedesc\"> Hello {this.state.username} </h1>\n                <h1> Current Balance is ${this.state.balanceDisplay}</h1>\n            </div> \n            <div className=\"searchbar\">\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    <input className=\"barrr\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input className=\"subbbb\" type=\"submit\" value=\"Submit\" />\n            </form>\n          \n            \n            </div>\n           <div className=\"stockinfodisplay\">\n                <div className=\"stockinfocenter\">\n                <div className=\"stocklogo\">\n                        <img src={logo1} />\n                </div>\n                <div className=\"stockinfo\">\n                    Company Name: {this.state.data.companyName}\n                   <div className=\"tableinfo\">\n                   <table class=\"wp-table\">\n                         <tr>\n                    <th className = \"tablenamestyling\">Industry :  <p1 className =\"companyname\">  {this.state.info.industry} </p1></th>\n                         <th className = \"tablenamestyling\">CEO :  <p1 className =\"companyname\"> {this.state.info.CEO} </p1></th>\n                        <th className = \"tablenamestyling\" >Sector : <p1 className =\"companyname\">  {this.state.info.sector} </p1> </th>\n                        </tr>\n                     <tr>\n                 <td className = \"tablenamestyling\">Price  $ <p1 className =\"numbers\"> {this.state.data.latestPrice} </p1> </td>\n                <td className = \"tablenamestyling\" >High $  <p1 className =\"numbers\">{this.state.data.high} </p1> </td>\n                    <td className = \"tablenamestyling\" >Low $  <p1 className =\"numbers\"> {this.state.data.low} </p1></td>\n                </tr>\n                 <tr>\n                     <td className = \"tablenamestyling\" >Volume : <p1 className =\"numbers\">{this.state.data.volume} </p1> </td>\n                      <td className = \"tablenamestyling\" > Week-52 High $ <p1 className =\"numbers\">{this.state.data.week52High} </p1> </td>\n                    <td className = \"tablenamestyling\" >Week-52 Low $ <p1 className =\"numbers\">{this.state.data.week52Low} </p1></td>\n                 </tr>\n                     <tr>\n                 <td className = \"tablenamestyling\" > MarketCap : <p1 className =\"numbers\">{this.state.data.marketCap} </p1> </td>\n                 <td className = \"tablenamestyling\"  >  Daily Change  $ <p1  style= {{color: Math.sign(this.state.data.change) == -1 ? \"red\" : \"green\"}}>  <p1 className =\"numbers\"> {this.state.data.change} </p1></p1> </td>\n                    <td className = \"tablenamestyling\" >YTD-Change : <p1  style= {{color: Math.sign(this.state.data.ytdChange) == -1 ? \"red\" : \"green\"}}> <p1 className =\"numbers\">{this.state.data.ytdChange} % </p1> </p1></td>\n    </tr>\n  </table>\n                   </div>\n                </div>\n                <div className = \"stock-trading\">\n                     {/* <button className= \"stockbtn\" onClick={this.handleBuy}> Buy </button> */}\n                     {/* <button className=\"stockbtn\" onClick={this.handleSell}> Sell </button> */}\n                     <DButton color=\"blue\" text=\"Buy\" onClick={this.handleBuy}/>\n                     <DButton color=\"blue\" text=\"Sell\" onClick={this.handleSell}/>\n                     <DButton color=\"blue\" text=\"Buy Call Option\" onClick={this.buyCallOption}/>\n                     <DButton color=\"blue\" text=\"Buy Put Option\" onClick={this.buyPutOption}/>\n                </div>\n\n                <div>\n                     {this.state.watchlisted ?  \n                     <DButton color=\"blue\" text= \"Remove from Watchlist\" onClick={this.removeFromWatchlist}/> \n                     :\n                     <DButton color=\"blue\" text= \"Add Watchlist\" onClick={this.addToWatchlist}/>\n                    }\n                     {/* <button className=\"stockbtn\" onClick={this.buyCallOption}> Call Option </button>\n                     <button className=\"stockbtn\" onClick={this.buyPutOption}> Put Option </button> */}\n                </div>\n                {/* <div style={{marginTop: 50, marginRight:100}}  >\n                     {this.state.watchlisted ?\n                        <button className=\"watchlistbtn\" onClick={this.removeFromWatchlist}> Remove from Watchlist </button>\n                        :\n                        <button className=\"watchlistbtn\" onClick={this.addToWatchlist}> Add to Watchlist </button>}\n                </div> */}\n                </div>\n                <div className=\"stockdescription\">\n                <div className ='maxstockdescription'> \n                <h1>\"\n                    <p1 className =\"descfont\">  \n                        {this.state.info.description}\n                        \n                    </p1>\n                   \" </h1>\n                 \n                    </div>\n                    <div className=\"stockGraph\">\n                <Plot\n                    data={[\n                        {\n                        x: this.state.stockChartXValues,\n                        y: this.state.stockChartYValues,\n                        type: 'scatter',\n                        mode: 'lines+markers',\n                        marker: {color: 'red'},\n                }\n        ]}\n                        layout={{width: 1150, height: 440, title: `${this.state.data.companyName}`, paper_bgcolor: 'transparent', plot_bgcolor: 'transparent'}}\n      />\n\n                </div>\n                </div>\n                <div className = \"newcycle\">\n                    <div className =\"threeboxes\">\n            <div className =\"boxone\">\n                <h1 className =\"newheader\"> {this.state.news.headline} </h1>\n                <p1> {t+ \"  \" + d} </p1>\n                <p1> {\" \"} Source : {this.state.news.source} </p1> <br/>\n                <img className = \"imagebox\" src={newimg_one} /> \n                <div className =\"summary\">  {this.state.news.summary} </div>\n                \n            </div>\n            <div className =\"boxtwo\">\n            <h1  className =\"newheader\" >{this.state.news2.headline}</h1>\n                <p1>{  t_newtwo + \"  \" +   d_newtwo }</p1>\n                <p1> {\" \"} Source: {this.state.news2.source} </p1> <br/>\n                <div> <img className = \"imagebox\" src={newimg_two} />  </div>\n                <div className =\"summary\">  {this.state.news2.summary} </div>\n            </div>\n            <div className =\"boxthree\">\n            <h1  className =\"newheader\"> {this.state.news3.headline} </h1>\n                <p1>{  t_newthree + \"  \" +  d_newthree}</p1>\n                <p1> {\" \"} Source : {this.state.news3.source} </p1> <br/>\n                <div className=\"testimg\"> <img className = \"imagebox\" src={newimg_three} /> </div>\n                <div className =\"summary\">  {this.state.news3.summary} </div>\n            </div>\n                    </div>\n                  \n                        </div>\n           </div>\n           \n        </div>\n    )\n}\n}\nexport default usermarketpage\n","import React from 'react';\nimport '../../App.css';\nimport HeroSection from '../HeroSection';\nimport Reasons from '../Reasons';\nimport Usermarketpage from './usermarketpage.js';\n\nfunction Home () {\n    return (\n        <React.Fragment>\n            <HeroSection />\n            <Reasons />\n            \n           \n        </React.Fragment>\n    )\n}\n\nexport default Home","import React, { useEffect, useState } from \"react\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport \"./LoginForm.css\";\r\n\r\nconst Parse = require('parse/node');\r\n\r\nfunction Login() {\r\n\r\n    const [user, setUser] = useState('');\r\n    const [pass, setPass] = useState('');\r\n    const [redirect, setRedirect] = useState(false);\r\n    const [loggedIn, setloggedIn] = useState(false);\r\n\r\n    //Form Submission\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (user.length === 0 || pass.length === 0) {\r\n            alert(\"Fill in empty fields\");\r\n        }\r\n\r\n        else {\r\n\r\n            try {\r\n                //Login operation\r\n                const loggedInUser = await Parse.User.logIn(user, pass);\r\n\r\n                //Displays the corresponding Parse User object\r\n                alert(`${loggedInUser.get('username')} has successfully signed in!`);\r\n\r\n                //Verify this is the current user\r\n                const currentUser = await Parse.User.current();\r\n                console.log(loggedIn === currentUser);\r\n\r\n                // Clear input fields\r\n                setUser('');\r\n                setPass('');\r\n\r\n                setRedirect(true);\r\n\r\n            } catch (error) {\r\n                alert(`${error.message}`);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    //Print loggedIn state\r\n    //useEffect(() => console.log(loggedIn), [loggedIn]);\r\n\r\n    //Redirects to home page upon successful form submission\r\n    if (redirect) {\r\n        return <Redirect to=\"/usermarketpage\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-bg\">\r\n         <video src=\"/videos/video-4.mp4\" autoPlay loop muted />\r\n            <div className=\"form-container\">\r\n            <div className = \"form-header\"></div>\r\n            <div className = \"form-content\"> Login\r\n                <form className=\"form\" onSubmit={handleSubmit}>\r\n                    <div className=\"form-inputs\">\r\n                        <input type=\"text\" required\r\n                            //Saves username input to be inputted to backend\r\n                            //upon submission\r\n                            value={user}\r\n                            onChange={(e) => {\r\n                            setUser(e.target.value);\r\n                        }}\r\n                            name=\"Username\" placeholder=\"Username\" />\r\n                    </div>\r\n                    <div className=\"form-inputs\">\r\n                        <input type=\"Password\" required\r\n                            //Saves password input to be inputted to backend\r\n                            //upon submission\r\n                            value={pass}\r\n                            onChange={(e) => {\r\n                            setPass(e.target.value);\r\n                        }}\r\n                            name=\"Password\" placeholder=\"Password\" />\r\n                    </div>\r\n                    <div className=\"form-buttons\">\r\n                        <button type=\"submit\" className=\"formbtn\"> \r\n                            Login\r\n                        </button>\r\n                        <Link to=\"/register\"><button className = \"formbtn\">\r\n                            Sign Up\r\n                        </button>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n         </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport \"./LoginForm.css\";\r\n\r\nconst Parse = require('parse/node');\r\n\r\nfunction Register() {\r\n\r\n    const [userRegister, setuserRegister] = useState('')\r\n    const [passRegister, setpassRegister] = useState('')\r\n    const [confirmpassRegister, setconfirmpassRegister] = useState('')\r\n    const [emailRegister, setemailRegister] = useState('')\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    //Form Submission\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (userRegister.length === 0 || passRegister.length === 0 || confirmpassRegister === 0\r\n            || emailRegister === 0) {\r\n            alert(\"Fill in empty fields\");\r\n        }\r\n\r\n        else if (passRegister != confirmpassRegister) {\r\n            alert(\"Passwords do not match\");\r\n        }\r\n\r\n        else {\r\n            try {\r\n                //Adds new User object to Parse database using form inputted user and password\r\n                await Parse.User.signUp(userRegister, passRegister);\r\n                alert('User registered!');\r\n\r\n                setRedirect(true);\r\n            } catch (error) {\r\n                console.log('Error registering new user: ', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Redirects to login page upon successful form submission\r\n    if (redirect) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-bg\">\r\n            <video src=\"/videos/video-4.mp4\" autoPlay loop muted />\r\n            <div className=\"form-container\">\r\n                <div className=\"form-header\"></div>\r\n                <div className=\"form-content\"> Register\r\n                <form className=\"form\" onSubmit={handleSubmit}>\r\n                        <div className=\"form-inputs\">\r\n                            <input type=\"text\" required\r\n                                //Saves username input to be inputted to backend\r\n                                //upon submission\r\n                                value={userRegister}\r\n                                onChange={(e) => {\r\n                                    setuserRegister(e.target.value);\r\n                                }}\r\n                                name=\"Username\" placeholder=\"Username\" />\r\n                        </div>\r\n                        <div className=\"form-inputs\">\r\n                            <input type=\"Password\" required\r\n                                //Saves password input to be inputted to backend\r\n                                //upon submission\r\n                                value={passRegister}\r\n                                onChange={(e) => {\r\n                                    setpassRegister(e.target.value);\r\n                                }}\r\n                                name=\"Password\" placeholder=\"Password\" />\r\n                        </div>\r\n                        <div className=\"form-inputs\">\r\n                            <input type=\"Password\" required\r\n                                //Saves password input to be inputted to backend\r\n                                //upon submission\r\n                                value={confirmpassRegister}\r\n                                onChange={(e) => {\r\n                                    setconfirmpassRegister(e.target.value);\r\n                                }}\r\n                                name=\"Password\" placeholder=\"Confirm Password\" />\r\n                        </div>\r\n                        <div className=\"form-inputs\">\r\n                            <input type=\"Email\" required\r\n                                //Saves email input to be inputted to backend\r\n                                //upon submission\r\n                                value={emailRegister}\r\n                                onChange={(e) => {\r\n                                    setemailRegister(e.target.value);\r\n                                }}\r\n                                name=\"Email\" placeholder=\"Email\" />\r\n                        </div>\r\n                        <div className=\"form-buttons\">\r\n                            <button className=\"formbtn\" >\r\n                                Register\r\n                        </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Register;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction CardItem(props) {\n  return (\n    <React.Fragment>\n      <li className='cards__item'>\n        <Link className='cards__item__link' to={props.path}>\n          <figure className='cards__item__pic-wrap' data-category={props.label}>\n            <img\n              className='cards__item__img'\n              alt='whoops missing image ;('\n              src={props.src}\n            />\n          </figure>\n          <div className='cards__item__info'>\n            <h5 className='cards__item__text'>{props.text}</h5>\n            <p className='cards__item__info'>{props.contact}</p>\n\n          </div>\n        </Link>\n      </li>\n    </React.Fragment>\n  );\n}\n\nexport default CardItem;","import React from 'react';\nimport './Cards.css';\nimport CardItem from './CardItem';\n\nfunction Cards() {\n  return (\n    <div className='cards'>\n      <h1>Meet the team!</h1>\n      <p></p>\n      <div className='cards__container'>\n        <div className='cards__wrapper'>\n          <ul className='cards__items'>\n            <CardItem\n              src='images/temporaryaboutme.jpg'\n              text='Hi,  my name is Dewan and Im an aspiring fullstack developer. Ive done work in mobile development, web development and even database development. For this project, Im focusing on improving my backend skills and helping out with the frontend when needed.'\n              contact='Contact me@'\n              label='Dewan Sunnah'\n              contact='Email: dewansunnah613@gmail.com'\n              path='/aboutus'\n            />\n             <CardItem\n              src='images/Dibba_aboutus3.jpeg'\n              text='Hey im Dibba! Throughout college, Ive focused on building mobile applications - but now Im exploring more fullstack web development. For this project I worked on the frontend side of things with the use of ReactJS.'\n              label='Dibba Roy'\n              contact='Email: Roydibba@gmail.com'\n              path='/aboutus'\n            />\n          </ul>\n          <ul className='cards__items'>\n            <CardItem\n              src='images/Jordan_aboutus.jpeg'\n              text='Hey! Im Jordan and Im an aspiring fullstack developer. For this project I focused more on the frontend for this site using ReactJS.'\n              label='Jordan Sze'\n              contact='Email: jsze5341@gmail.com'\n              path='/aboutus'\n            />\n            <CardItem\n              src='images/Brian(1).png'\n              text='For this project I worked on the land page informations blocks, market page and user marketpage using the IEXClous api for the data'\n              label='Shu Qiang Qu'\n              contact='Email: Shuqiangwu1@gmail.com'\n              path='/aboutus'\n            />\n          </ul>\n          <ul className='cards__items'>\n            <CardItem\n              src='images/kento_aboutus.jpeg'\n              text='Hey Im Ivan! For this project I worked on creating the database schema.'\n              label='Ivan Yatsko'\n              contact='Email: Ivan.Yatsko@gmail.com'\n              path='/aboutus'\n            />\n            <CardItem\n              src='images/emran_aboutus.png'\n              text=''\n              label='Our Professor'\n              contact='Email: unknown'\n              path='/aboutus'\n            />\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Cards;\n","import React from \"react\"\nimport Cards from \"../Cards\"\n\n\nfunction Aboutus(){\n    return(\n        <React.Fragment>\n            <Cards />\n        </React.Fragment>\n    )\n}\n\nexport default Aboutus","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport iex from './iexapitoken.js'\nimport './MockData.css';\n\nvar latestime;\nvar d;\nvar t;\nclass StockRow extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n           data: {},\n        }\n    }\n    componentDidMount() {\n        const url = `${iex.base_url}/stock/${this.props.ticker}/quote/?&token=${iex.api_token}`\n        console.log(\"stockrow url: \", url);\n\n        fetch(url).then((Response) => Response.json()).then((data) => {\n            console.log(data)\n           latestime = (data.latestUpdate) \n           t = new Date(latestime).toLocaleTimeString(\"en-US\")\n           d = new Date(latestime).toLocaleDateString(\"en-US\")\n            this.setState({\n               data: data\n           \n            })\n        })\n   \n    }\n\n    render (){\n        return (\n                <tr className = \"tabledesign\">\n                    <td>\n                        <Link to={{\n                            pathname: '/usermarketpage',\n                            state: { value: this.props.ticker }\n                        }} className=\"cellcolor\"> {this.props.ticker} </Link>\n                    </td>\n                    <td className = \"companyname\" > {this.state.data.companyName} </td>\n                    <td className = \"numbers\"> ${this.state.data.latestPrice} </td>\n                    <td className = \"numbers\" > ${this.state.data.open} </td>\n                    <td className = \"numbers\"> ${this.state.data.close} </td>\n                    <td className = \"numbers\"  style= {{color: Math.sign(this.state.data.changePercent) == -1 ? \"red\" : \"green\"}}> {this.state.data.changePercent} </td>\n                    <td className = \"numbers\"> {t + \" \" + d} </td>\n                \n                </tr>\n\n        )\n}\n\n}\n\nexport default StockRow;","import React, { Component } from 'react';\nimport Mock_Data from './Mock_Data.js';\nimport './MockData.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport iex from './iexapitoken.js'\nimport StockRow from \"./StockRow.js\"\n\nconst changeStyle = { \n    color: 'blue',\n}\n  \nfunction getData(){\n    const url = `${iex.base_url}/stock/${'googl'}/peers/?&token=${iex.api_token}`\n\n    fetch(url).then((Response) => Response.json()).then((data) => {\n        console.log(data)\n        this.setState({\n           data: data\n        })\n    })\n}\n\nfunction MarketData(){\n  \n\n    getData(\"\")\n\n    return (\n     <div>\n         <div className= \"container\">  \n         <div className = \"safe\">   <h1> Investing in Safe Stocks & Low Volatility Stocks </h1>   </div>\n           \n             <div className= \"para\"> While we all might love the idea of investing in stocks risk-free, there's no such thing as a stock that's 100% safe.\n                  Even the best companies can face unexpected trouble, and it's common for even the most stable corporations to experience \n                  significant stock price volatility. We've seen this during the COVID-19 pandemic, during which many strong companies have\n                   experienced dramatic drops in stock price. If you want a completely safe investment with little chance you'll lose money, \n                   Treasury securities or CDs may be your best bet. That said, some stocks are significantly safer than others. \n                   If a company is in good financial shape, has pricing power over its rivals, and sells products that people buy even during \n                   deep recessions, it’s likely a relatively safe investment.  By Matthew Frankel  </div>\n        \n         <div className = \"titledesign\">  <h1> Our Top 20 Recommended Stocks </h1></div>\n         \n         <table className =\"table\">\n        <thead>\n            <tr className = \"chartdesign\">\n               \n                <th className = \"publicsans\"> TICKER </th>\n                <th className = \"publicsans\"> NAME</th>\n                <th className = \"publicsans\"> PRICE </th>\n                <th className = \"publicsans\"> OPEN </th>\n                <th className = \"publicsans\"> CLOSE</th>\n                <th className = \"publicsans\"> % CHANGE</th>\n                <th className = \"publicsans\"> LAST UPDATE </th>\n                \n              \n            </tr>\n        </thead>\n        <tbody className = \"tabledesign\">\n            \n            < StockRow  ticker = \"AMZN\" />\n            <StockRow ticker = \"GOOG\" />\n            <StockRow ticker = \"TSLA\" />\n            <StockRow ticker = \"MA\" />\n            <StockRow ticker = \"DIS\" />\n            <StockRow ticker = \"MSFT\" />\n            <StockRow ticker = \"SPOT\" />\n            <StockRow ticker = \"NFLX\" />\n            <StockRow ticker = \"NKE\" />\n            <StockRow ticker = \"FB\" />\n            <StockRow ticker = \"UNH\" />\n            <StockRow ticker = \"SPY\" />\n            <StockRow ticker = \"VOO\" />\n            <StockRow ticker = \"NVDA\" />\n            <StockRow ticker = \"BAC\" />\n            <StockRow ticker = \"XOM\" />\n       \n        </tbody>\n\n         </table>\n         \n         \n         </div>\n         <div className= \"margins\"> </div>\n     </div>\n   \n    );\n\n}\nexport default MarketData\n","import React from 'react';\nimport './Footer.css';\nimport { Button } from './Button';\nimport { Link } from 'react-router-dom';\n\nfunction Footer() {\n  return (\n    <div className='footer-container'>\n      <div class='footer-links'>\n        <div className='footer-link-wrapper'>\n          <div class='footer-link-items'>\n            <h2>About Us</h2>\n            <Link to='/'>How it works</Link>\n            <Link to='/'>Careers</Link>\n            <Link to='/'>Terms of Service</Link>\n          </div>\n          <div class='footer-link-items'>\n            <h2>Contact Us</h2>\n            <Link to='/'>Contact</Link>\n            <Link to='/'>Support</Link>\n          </div>\n        </div>\n        <div className='footer-link-wrapper'>\n          <div class='footer-link-items'>\n            <h2>Social Media</h2>\n            <Link to='/'>Instagram</Link>\n            <Link to='/'>Facebook</Link>\n            <Link to='/'>Youtube</Link>\n            <Link to='/'>Twitter</Link>\n          </div>\n        </div>\n      </div>\n      <section class='social-media'>\n        <div class='social-media-wrap'>\n          <div class='footer-logo'>\n            <Link to='/' className='social-logo'>\n            Stock-Mocket&nbsp;&nbsp;\n            <i class='fas fa-chart-line' />\n            </Link>\n          </div>\n          <small class='website-rights'>StockMocket © 2021</small>\n          <div class='social-icons'>\n            <Link\n              class='social-icon-link facebook'\n              to='/'\n              target='_blank'\n              aria-label='Facebook'\n            >\n              <i class='fab fa-facebook-f' />\n            </Link>\n            <Link\n              class='social-icon-link instagram'\n              to='/'\n              target='_blank'\n              aria-label='Instagram'\n            >\n              <i class='fab fa-instagram' />\n            </Link>\n            <Link\n              class='social-icon-link youtube'\n              to='/'\n              target='_blank'\n              aria-label='Youtube'\n            >\n              <i class='fab fa-youtube' />\n            </Link>\n            <Link\n              class='social-icon-link twitter'\n              to='/'\n              target='_blank'\n              aria-label='Twitter'\n            >\n              <i class='fab fa-twitter' />\n            </Link>\n            <Link\n              class='social-icon-link twitter'\n              to='/'\n              target='_blank'\n              aria-label='LinkedIn'\n            >\n              <i class='fab fa-linkedin' />\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport iex from './iexapitoken.js';\nimport \"./UserStockRow.css\";\n\nvar latestime;\nvar d;\nvar t;\nclass UserStockRow extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: {},\n        }\n    }\n\n    componentDidMount() {\n        const url = `${iex.base_url}/stock/${this.props.ticker}/quote/?&token=${iex.api_token}`\n\n        fetch(url).then((Response) => Response.json()).then((data) => {\n            //console.log(data)\n            latestime = (data.latestUpdate)\n            t = new Date(latestime).toLocaleTimeString(\"en-US\")\n            d = new Date(latestime).toLocaleDateString(\"en-US\")\n            this.setState({\n                data: data\n            })\n\n        })\n    }\n\n    render() {\n        return (\n            <tr className=\"tabledesign\">\n                <td>\n                    <Link to={{\n                        pathname: '/usermarketpage',\n                        state: { value: this.props.ticker }\n                    }} className=\"cellcolor\"> {this.props.ticker} </Link>\n                </td> \n                <td className=\"numbers\"> {this.props.shares} </td>\n                <td className=\"numbers\"> ${this.props.stockPrice} </td>\n                <td className=\"numbers\"> ${this.state.data.latestPrice} </td>\n                <td className=\"numbers\" style={{ color: Math.sign(this.state.data.changePercent) == -1 ? \"red\" : \"green\" }}> {this.state.data.changePercent} </td>\n                <td className=\"numbers\"> ${this.props.totalPrice} </td>\n            </tr>\n\n        )\n    }\n\n}\n\nexport default UserStockRow;","import React, { Component } from \"react\";\n\nclass TransactionRow extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: {},\n        }\n    }\n    componentDidMount() {\n        \n    }\n\n    render() {\n        return (\n            <tr className=\"tabledesign\">\n                <td> {this.props.transDate} </td>\n                <td> {this.props.orderType} </td>\n                <td> {this.props.buysell} </td>\n                <td> {this.props.effect} </td>\n                <td className=\"cellcolor\"> {this.props.ticker} </td>\n                <td className=\"numbers\"> {this.props.stock_amount} </td>\n                <td className=\"numbers\"> {this.props.prices} </td>\n            </tr>\n        )\n    }\n\n}\n\nexport default TransactionRow; \n\n/*\nresult += \"<tr>\";\n            //trans date\n            result += \"<td>\";\n            result += transDate[i];\n            result += \"</td>\";\n            //order type\n            result += \"<td>\";\n            result += orderType[i];\n            result += \"</td>\"\n            //buysell\n            result += \"<td>\";\n            result += buysell[i];\n            result += \"</td>\";\n            //effect\n            result += \"<td>\";\n            result += effect[i];\n            result += \"</td>\";\n            //ticker\n            result += \"<td>\";\n            result += ticker[i];\n            result += \"</td>\"\n            //stock amount\n            result += \"<td>\";\n            result += stock_amount[i];\n            result += \"</td>\"\n            //prices\n            result += \"<td>\";\n            result += prices[i];\n            result += \"</td>\";\n                        \n            result += \"</tr>\";\n*/\n","import React, { Component } from \"react\";\nimport { Doughnut, ArcElement } from 'react-chartjs-2';\n\n\nclass PortfolioDiversity extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: {},\n            graphdata: {\n                labels: this.props.stock,\n                datasets: [{\n                  label: 'PORTFOLIO DIVERSITY',\n                  data: this.props.chartData,\n                  backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                    'rgba(255, 205, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(201, 203, 207, 0.2)',\n                    'rgba(120,28,129,0.2)',\n                    'rgba(64,67,153,0.2)',\n                    'rgba(72,139,194,0.2)',\n                    'rgba(107,178,140,0.2)',\n                    'rgba(159,190,87,0.2)',\n                    'rgba(210,179,63,0.2)',\n                    'rgba(231,126,49,0.2)',\n                    'rgba(217,33,32,0.2)'\n                    \n                  ],\n                  borderColor: [\n                    'rgb(255, 99, 132)',\n                    'rgb(255, 159, 64)',\n                    'rgb(255, 205, 86)',\n                    'rgb(75, 192, 192)',\n                    'rgb(54, 162, 235)',\n                    'rgb(153, 102, 255)',\n                    'rgb(201, 203, 207)',\n                    'rgb(120,28,129)',\n                    'rgb(64,67,153)',\n                    'rgb(72,139,194)',\n                    'rgb(107,178,140)',\n                    'rgb(159,190,87)',\n                    'rgb(210,179,63)',\n                    'rgb(231,126,49)',\n                    'rgb(217,33,32)'\n                  ],\n                  borderWidth: 1,\n                  hoverOffset: 20,\n                  hoverBorderWidth: 2.5,\n                }]\n              }\n        }\n        console.log(props);\n        \n    }\n\n\n\n    render() {\n\n        return (\n            <div className=\"container\">\n            <Doughnut data= {this.state.graphdata} />\n            </div>\n        )\n    }\n\n}\n\nexport default PortfolioDiversity;","import React, { useState, useEffect, useCallback } from \"react\";\nimport StockRow from \"./StockRow.js\";\nimport \"./ProfilePage.css\";\nimport \"./MockData.css\";\n\nconst Parse = require('parse/node');\n\nfunction UserWatchlist() {\n    \n    const [watchedstocks, setWatchedStocks] = useState([]);\n    const [stocksLength, setStocksLength] = useState(0);\n    \n    async function watchlistStocks() {\n        console.log(\"get stocks\");\n        var stocks = [];\n        var count = 0;\n\n        try {\n            //Get stock owner's username\n            const currentUser = await Parse.User.current();\n            const OwnerQuery = new Parse.Query('User');\n            OwnerQuery.equalTo('username', currentUser.get('username'));\n            const Owner = await OwnerQuery.first();\n\n            //Get all stocks owned by user\n            const portfolioQuery = new Parse.Query('Watchlist');\n            portfolioQuery.equalTo('stockOwner', Owner);\n            let queryResults = await portfolioQuery.find();\n\n            //Stock not owned\n            if (queryResults.length == 0) {\n                console.log('No stocks in watchlist');\n            }\n\n            else {\n                for (let result of queryResults) {\n                    stocks.push(result.get('stockName'));\n                    count++;\n                    setStocksLength(count);\n                }\n                setWatchedStocks(stocks);\n            }\n        }\n        catch (err) {\n            //alert(\"Not logged in\");\n        }\n    }\n\n    \n    //Gets User's watchlist upon page load\n    useEffect(() => {\n        watchlistStocks();\n    }, []);\n    \n    \n    function displayWatchlist() {\n        var watchliststocks = [];\n\n        if (watchedstocks.length == 0 || watchedstocks.length == null) {\n            return null;\n        }\n\n        else {\n            for (var i = 0; i < stocksLength; i++) {\n                watchliststocks.push(<StockRow ticker={String(watchedstocks[i])} />);\n            }\n\n            return watchliststocks;\n        }\n    }\n\n    return (\n        <div className=\"watchlist-container\">\n            <h1 className=\"watchlist-header\"> Your Watchlist </h1>\n                <div className=\"titledesign\">  </div>\n                <table className=\"table\">\n                    <thead>\n                        <tr className=\"chartdesign\">\n                            <th className=\"publicsans\"> TICKER </th>\n                            <th className=\"publicsans\"> NAME</th>\n                            <th className=\"publicsans\"> PRICE </th>\n                            <th className=\"publicsans\"> OPEN </th>\n                            <th className=\"publicsans\"> CLOSE</th>\n                            <th className=\"publicsans\"> % CHANGE</th>\n                            <th className=\"publicsans\"> LAST UPDATE </th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"tabledesign\">\n                        {displayWatchlist()}\n                    </tbody>\n                </table>\n        </div>\n\n    );\n};\n\nexport default UserWatchlist;","import React, { useState, useEffect, useCallback } from \"react\";\nimport UserStockRow from \"./UserStockRow.js\"\nimport iex from './iexapitoken.js'\nimport TransactionRow from \"./TransactionRow.js\"\nimport iexapitoken from \"./iexapitoken\"\nimport PortfolioDiversity from \"./PortfolioDiversity\";\nimport { Link } from 'react-router-dom';\nimport UserWatchlist from \"./UserWatchlist.js\";\nimport \"./ProfilePage.css\";\n\nconst Parse = require('parse/node');\n\nfunction ProfilePage() {\n\n    const [balance, setBalance] = useState(null);\n    const [balanceDisplay, setbalanceDisplay] = useState(0);\n    const [account_value, set_account_value] = useState(0);\n    const [stocks_value, set_stocks_value] = useState(0);\n    const [total_gain_loss, set_total_gain_loss] = useState(0);\n    \n    const [stocks, setStocks] = useState([]);\n    const [stockPrice, setstockPrice] = useState(0);\n    const [shares, setShares] = useState(0);\n    const [stocksLength, setstocksLength] = useState(0);\n\n    const [stock_curr_price, set_stock_curr_price] = useState(0);\n    \n    const [stockValue, setstockValue] = useState([]);\n    const [profileDisplay, setprofileDisplay] = useState(false);\n  \n    const [transDate, setTransDate] = useState([]);\n    const [orderType, setOrderType] = useState([]);\n    const [buysell, setBuySell] = useState([]);\n    const [effect, setEffect] = useState([]);\n    const [ticker, setTicker] = useState([]);\n    const [stock_amount, setStockAmount] = useState([]);\n    const [prices, setPrices] = useState([]);\n    const [transLength, setTransLength] = useState([]);\n\n    async function getUserBalance() {\n        \n        console.log(\"get balance\");\n\n        try {\n            const currentUser = await Parse.User.current();\n\n            var floatbalance = parseFloat(currentUser.get('balance'));\n            var roundedbalance = Math.floor(floatbalance * 100) / 100;\n            \n            setBalance(roundedbalance);\n            setbalanceDisplay(roundedbalance);\n\n            //Sets balance on page load, balance is null on page load\n            if (balance == null) {\n                setBalance(roundedbalance);\n            }\n        }\n        catch (err) {\n            //alert(\"Not logged in\");\n        }\n\n    }\n    //useEffect called later for less synchronization hell\n\n    //Withdraw operation\n    //Triggers balance display upon withdrawal\n    async function handleWithdraw(event) {\n        event.preventDefault();\n\n        const withdraw = prompt('Withdraw amount:');\n\n        if (withdraw == null) {\n            console.log(\"Cancel withdraw\");\n            return 0;\n        }\n\n        else if (parseFloat(withdraw) > balance) {\n            alert(\"Attempting to withdraw more more money than allowed\");\n            return\n        }\n\n        else if (withdraw > 0) {\n            var floatbalance = parseFloat(balance);\n            var floatwithdraw = parseFloat(withdraw).toFixed(2);\n            var roundedbalance = Math.floor(floatbalance * 100) / 100;\n            var totalbalance = ((roundedbalance - floatwithdraw) * 100) / 100;\n\n            try {\n                const currentUser = await Parse.User.current();\n\n                currentUser.set('balance', totalbalance);\n                currentUser.save();\n\n                //add withdrawal to orders table\n                var order_entry = new Parse.Object('Order');\n                order_entry.set('transDate', new Date());\n                order_entry.set('isStockOperation', false);\n                order_entry.set('isBuy', false);\n                order_entry.set('isOpenPos', false);\n                order_entry.set('ticker', \"\");\n                order_entry.set('amount', parseFloat(floatwithdraw));\n                order_entry.set('account', currentUser);\n                order_entry.save();\n\n                setBalance(totalbalance);\n                getUserBalance();\n            }\n            catch{\n                console.log(\"Could not save balance\");\n            }\n        }\n\n        else {\n            alert(\"Invalid number, please try again\");\n        }\n    }\n\n    //Deposit operation\n    //Triggers balance display upon deposit\n    async function handleDeposit(event) {\n        event.preventDefault();\n\n        const deposit = prompt('Deposit amount:');\n\n        if (deposit == null) {\n            console.log(\"Cancel deposit\");\n            return 0;\n        }\n\n        else if (deposit > 0) {\n            var floatbalance = parseFloat(balance);\n            var floatdeposit = parseFloat(parseFloat(deposit).toFixed(2));\n            var roundedbalance = parseFloat(Math.floor(floatbalance * 100) / 100);\n            var totalbalance = parseFloat(((roundedbalance + floatdeposit) * 100) / 100);\n\n            try {\n                const currentUser = await Parse.User.current();\n\n                currentUser.set('balance', totalbalance);\n                currentUser.save();\n\n                //add deposit to orders table\n                var order_entry = new Parse.Object('Order');\n                order_entry.set('transDate', new Date());\n                order_entry.set('isStockOperation', false);\n                order_entry.set('isBuy', true);\n                order_entry.set('isOpenPos', true);\n                order_entry.set('ticker', \"\");\n                order_entry.set('amount', parseFloat(floatdeposit));\n                order_entry.set('account', currentUser);\n                order_entry.save();\n\n                setBalance(totalbalance);\n                getUserBalance();\n            }\n            catch{\n                console.log(\"Could not save balance\");\n            }\n        }\n\n        else {\n            alert(\"Invalid number, please try again\");\n        }\n    }\n\n    //Gets all of currently logged in user's stock data\n    async function getUserStocks() {\n        console.log(\"scope:getUserStocks\");\n        \n        var stockName = [];\n        var AveragePrice = [];\n        var sharesBought = [];\n        var count = 0;\n\n        //Get stock owner's username\n        const currentUser = await Parse.User.current();\n        const OwnerQuery = new Parse.Query('User');\n        OwnerQuery.equalTo('username', currentUser.get('username'));\n        const Owner = await OwnerQuery.first();\n\n        //Get all stocks owned by user\n        const portfolioQuery = new Parse.Query('Portfolio');\n        portfolioQuery.equalTo('stockOwner', Owner);\n        let queryResults = await portfolioQuery.find();\n\n        //Append user owned stock data to be set to corresponding states\n        for (let result of queryResults) {\n            stockName.push(result.get('stockName'));\n            AveragePrice.push(result.get('AveragePrice'));\n            sharesBought.push(result.get('sharesBought'));\n            count++;\n        }\n\n        setStocks(stockName);\n        setstockPrice(AveragePrice);\n        setShares(sharesBought);\n        setstocksLength(count);\n\n    }\n\n    function stockDisplay() {\n        var profileStocks = [];\n\n        for (var i = 0; i < stocksLength; i++) {\n            profileStocks.push(\n                <UserStockRow ticker={stocks[i]}\n                    shares={shares[i]}\n                    stockPrice={stockPrice[i]}\n                    totalPrice={(stockPrice[i] * shares[i]).toFixed(2)}>\n                </UserStockRow>)\n        }\n\n        return profileStocks;\n    }\n\n    //Account Value = Total Stock Values + Balance\n    async function accountvalueDisplay() {\n        const currentUser = await Parse.User.current();\n        set_account_value(currentUser.get(\"balance\") + stocks_value);\n    }\n    \n    async function getCurrPrices() {\n        console.log(\"scope: getCurrPrices\");\n        console.log(stocks.length);\n        let currPrice = []\n                \n        for (var i=0; i < stocks.length; i++) {\n            const url = `${iex.base_url}/stock/${stocks[i]}/quote/?&token=${iex.api_token}`;\n                \n            await fetch(url).then((Response) => Response.json()).then((data)  => {\n                currPrice.push(parseFloat(data.latestPrice));\n            })\n        };\n        console.log(currPrice)\n        set_stock_curr_price(currPrice);\n    }\n    \n    function equityValueDisplay() {\n        console.log(\"scope: equityValueDisplay\");\n        var stocksValue = 0;\n        var values = [];\n        \n        if (stocksLength != 0) {\n\n            console.log(\"TEST\");\n            \n            for (var i = 0; i < stocks.length; i++) {\n                values.push(stock_curr_price[i] * shares[i]);\n            }\n            console.log(values);\n\n            for (var i = 0; i < stocks.length; i++) \n                stocksValue += values[i];\n        }\n        stocksValue.toFixed(2);\n        \n        set_stocks_value(stocksValue);\n    }\n    \n\n    //Calculate net gain/loss then display\n    async function calcGainLoss() {\n        \n        const currentUser = await Parse.User.current();\n        const OwnerQuery = new Parse.Query('User');\n        OwnerQuery.equalTo('username', currentUser.get('username'));\n        const Owner = await OwnerQuery.first();\n                \n        //find all deposits and add it up\n        const depositQuery = new Parse.Query('Order');\n        depositQuery.equalTo('account', Owner);\n        depositQuery.equalTo('isStockOperation', false);\n        depositQuery.equalTo('isOpenPos', true);\n        depositQuery.equalTo('isBuy', true);\n        \n        var depositArr = await depositQuery.find();\n        var totalDeps = 0;\n        \n        for (var row of depositArr) {\n            totalDeps += row.get('amount');\n        }\n        \n        //find all withdrawals and add it up\n        const withdrawalQuery = new Parse.Query('Order');\n        withdrawalQuery.equalTo('account', Owner);\n        withdrawalQuery.equalTo('isStockOperation', false);\n        withdrawalQuery.equalTo('isOpenPos', false);\n        withdrawalQuery.equalTo('isBuy', false);\n        \n        var withArr = await withdrawalQuery.find();\n        var totalWiths = 0;\n        \n        for (var row of withArr) {\n            totalWiths += row.get('amount');\n        }\n        \n        var basis = totalDeps - totalWiths;\n                \n        set_total_gain_loss(Math.floor((account_value - basis) * 100) / 100) ;\n    }\n\n    \n    useEffect(() => {\n        getTransactionHistory();\n        getUserBalance();\n        getUserStocks();\n    }, []);\n    \n    \n    useEffect(() => {\n        getCurrPrices();\n    }, [stocks]);\n    \n    useEffect(() => {\n        equityValueDisplay();\n    }, [stock_curr_price]);\n    \n    useEffect(() => {\n        accountvalueDisplay();\n    }, [stocks_value]);\n    \n    useEffect(() => {\n        calcGainLoss();\n    }, [account_value]);\n    \n    //Get all transactions by user\n    //@return list of transactions by user\n    async function getTransactionHistory() {\n\n        var transDateArr = [];\n        var orderTypeArr = [];\n        var buysellArr = [];\n        var effectArr = [];\n        var tickerArr = [];\n        var stock_amountArr = [];\n        var price = [];\n        var count = 0;\n\n        //Get stock owner's username\n        const currentUser = await Parse.User.current();\n        const OwnerQuery = new Parse.Query('User');\n        OwnerQuery.equalTo('username', currentUser.get('username'));\n        const Owner = await OwnerQuery.first();\n\n        //Get all transactions made by user\n        const historyQuery = new Parse.Query('Order');\n        historyQuery.equalTo('account', Owner);\n        //Filter to 10 most recent\n        historyQuery.descending('transDate');\n        historyQuery.limit(10);\n        \n        let queryResults = await historyQuery.find();\n        console.log(\"getTransactionHistory\");\n        \n        //Append user owned stock data to be set to corresponding states\n        for (let result of queryResults) {\n            transDateArr.push(result.get('transDate').toString());\n\n            var op_is_stock = result.get('isStockOperation');\n            var eff = result.get('isOpenPos');\n            \n            if (true == op_is_stock) {\n                orderTypeArr.push(\"Stock\");\n\n                if (true == eff) {\n                    effectArr.push(\"Open\");\n                }\n                else {\n                    effectArr.push(\"Close\");\n                }\n            }\n            else if (true == eff) {\n                orderTypeArr.push(\"Deposit\");\n                effectArr.push(\"\");\n            }\n            else if (false == eff) {\n                orderTypeArr.push(\"Withdrawal\");\n                effectArr.push(\"\");\n            }\n            //means something went wrong\n            else {\n                orderTypeArr.push(\"---\");\n                effectArr.push(\"---\");\n            }\n\n            var is_long = result.get('isBuy');\n            if (is_long && op_is_stock) {\n                buysellArr.push(\"Buy\");\n            }\n            else if (!is_long && op_is_stock) {\n                buysellArr.push(\"Sell\");\n            }\n            else {\n                buysellArr.push(\"\");\n            }\n\n            tickerArr.push(result.get('ticker'));\n            stock_amountArr.push(result.get('amount'));\n            price.push(result.get('price'));\n\n            count++;\n        }\n\n        setTransDate(transDateArr);\n        setOrderType(orderTypeArr);\n        setBuySell(buysellArr);\n        setEffect(effectArr);\n        setTicker(tickerArr);\n        setStockAmount(stock_amountArr);\n        setPrices(price);\n        setTransLength(count);\n    }\n\n    function transHistoryDisplay() {\n        var result = [];\n\n        for (var i = 0; i < transLength; i++) {\n            result.push(\n                <TransactionRow\n                    transDate={transDate[i]}\n                    orderType={orderType[i]}\n                    buysell={buysell[i]}\n                    effect={effect[i]}\n                    ticker={ticker[i]}\n                    stock_amount={stock_amount[i]}\n                    prices={prices[i]}\n                >\n                </TransactionRow>\n            )\n        }\n\n        return result;\n    }\n\n    useEffect(() => {\n        getstockValue();\n     }, [stocks,shares]);\n\n\n     async function getstockValue(){\n        var stockvals = [];\n        if (stocks != 0 || stocks != null || typeof(stocks) != \"undefined\"){\n        for(const stock of stocks){\n            const response = await fetch(`${iexapitoken.base_url}/stock/${stock}/quote/?&token=${iexapitoken.api_token}`)\n            const res = await response.json();\n            stockvals.push(res.latestPrice);\n        }  \n    }\n        if(shares == 0 || shares == null){\n            return null;\n        }else{\n            calculatestockValue(stockvals);\n        }\n    }\n    function calculatestockValue(props){\n        var stockvals = [];\n        for(var i = 0; i < props.length; i++){\n            var x = Math.floor((props[i] * shares[i]) * 100) / 100;\n            stockvals.push(x);\n        }\n        //console.log(stockvals);\n        setstockValue(stockvals);\n \n    }\n\n\n    function displayChartData(){\n        if((stockValue == 0 || stockValue == null)){\n            // console.log(\"STOCK IN IFSTATEMENT\", stocks);\n            const errormsg = {\n                color: \"white\",\n                backgroundColor: \"DodgerBlue\",\n                padding: \"10px\",\n                fontFamily: \"Arial\"\n              };\n            return (<div>\n                <Link to=\"/usermarketpage\" style={errormsg}>Explore market page and buy a stock!</Link>\n            </div>);\n        } else if (stocks == 0 || stocks == null){\n            // console.log(\"SHARES IN IFSTATMENT\", shares);\n            return null;\n        }else{\n            // console.log(\"TRIGGERING ELSE STATEMENT NOW\");\n            return (<PortfolioDiversity stock={stocks} chartData={stockValue}/>)\n \n        }\n \n    }\n\n\n    return (\n        <div className=\"profile-container\">\n            <div className=\"bar\">\n            <div className=\"user-assets\">\n                <h1> Assets </h1>\n                <table>\n                    <tr>\n                        <td>\n                            <table className=\"balances-buttons\">\n                                <tr>\n                                    <table className=\"asset-breakdown-table\">\n                                    <tr>\n                                    <td>Equity value:</td>\n                                    <td>${stocks_value}</td>\n                                    </tr>\n                                    <tr>\n                                    <td>Cash balance:</td>\n                                    <td>${balanceDisplay}</td>\n                                    </tr>\n                                    <tr>\n                                    <td>Total account value:</td>\n                                    <td>${account_value}</td>\n                                    </tr>\n                                    <tr>\n                                    <td>Net gain/loss:</td>\n                                    <td>${total_gain_loss}</td>\n                                    </tr>\n                                    </table>\n                                </tr>\n                                <tr>\n                                    <div className=\"cash-balance\">\n                                        <button type=\"submit\" className=\"balancebtn\" onClick={handleWithdraw}>\n                                            Withdraw\n                                        </button>\n                                        <button type=\"submit\" className=\"balancebtn\" onClick={handleDeposit}>\n                                            Deposit\n                                        </button>\n                                    </div>\n                                </tr>\n                            </table>\n                        </td>\n                        {/* <td>\n                            <div className=\"piechart-placeholder\">\n                                pie chart goes here\n                            </div>\n                        </td> */}\n                    </tr>\n                </table>\n\n            </div>\n            <div className=\"chart\">\n                {displayChartData()}\n                </div>\n            </div>\n            <div className = \"btncontainer\">\n                <button className=\"balancebtn\" onClick={() => setprofileDisplay(!profileDisplay)} > Watchlist View </button>\n            </div>\n            <tbody className=\"watchlist\">\n                {profileDisplay ? <UserWatchlist /> : null}\n            </tbody>\n            <tbody className=\"stock-table\">\n                <div className=\"container\">\n                    <div> <br /> </div>\n                    <h1> Your Stocks </h1>\n                    <div className=\"titledesign\">  </div>\n                    <table className=\"table\">\n                        <thead>\n                            <tr className=\"chartdesign\">\n                                <th className=\"publicsans\"> TICKER </th>\n                                <th className=\"publicsans\"> SHARES </th>\n                                <th className=\"publicsans\"> AVERAGE PRICE </th>\n                                <th className=\"publicsans\"> CURRENT PRICE </th>\n                                <th className=\"publicsans\"> % CHANGE </th>\n                                <th className=\"publicsans\"> TOTAL PRICE </th>\n                            </tr>\n                        </thead>\n                        <tbody className=\"tabledesign\">\n                            {stockDisplay()}\n                        </tbody>\n                    </table>\n                </div>\n            </tbody>\n            <tbody className=\"stock-table\">\n                <h1> Recent Transactions </h1>\n                <p> For more transactions, go to <a href=\"/history\">History</a> </p>\n                <div className=\"container\">\n                    <div className=\"titledesign\"> </div>\n                    <table className=\"table\">\n                        <thead>\n                            <tr className=\"chartdesign\">\n                                <th className=\"publicsans\"> Time Placed </th>\n                                <th className=\"publicsans\"> Order Type </th>\n                                <th className=\"publicsans\"> Buy/Sell </th>\n                                <th className=\"publicsans\"> Effect </th>\n                                <th className=\"publicsans\"> Security </th>\n                                <th className=\"publicsans\"> Amount </th>\n                                <th className=\"publicsans\"> Price </th>\n                            </tr>\n                        </thead>\n                        <tbody className=\"tabledesign\">\n                            {transHistoryDisplay()}\n                        </tbody>\n                    </table>\n                </div>\n            </tbody>\n        </div>\n    );\n\n}\n\nexport default ProfilePage;","import { createGlobalState } from 'react-hooks-global-state';\n\n//Global state that if an option is deleted\n//Used to render options page dynamically\nconst { setGlobalState, useGlobalState } = createGlobalState({\n    optionsSold: false,\n});\n\n\nexport const setFavErrorMessage = (s: string) => {\n    setGlobalState('optionsSold', s);\n};\n\nexport { useGlobalState };","import React, { useState, useEffect, Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useGlobalState } from '../GlobalState.js';\nimport iex from './iexapitoken.js'\nimport './MockData.css';\n\nconst Parse = require('parse/node');\n\nfunction OptionsRow(props) {\n    const [data, setData] = useState([]);\n    const [optionsSold, setOptionsSold] = useGlobalState('optionsSold');\n    \n\n    //Used for options calculations\n    var time;\n    var epocmonth = 2629743000;\n    var epocday = 86400000;\n\n    //Fetch API data \n    useEffect(() => {\n        var t, d, latestime;\n        const url = `${iex.base_url}/stock/${props.ticker}/quote/?&token=${iex.api_token}`\n        fetch(url).then((Response) => Response.json()).then((data) => {\n            latestime = (data.latestUpdate)\n            t = new Date(latestime).toLocaleTimeString(\"en-US\")\n            d = new Date(latestime).toLocaleDateString(\"en-US\")\n            setData(data);\n        })\n    }, []);\n\n    /**\n     * ************************************************************\n     * OPTIONS CALCULATIONS\n     **************************************************************\n     **/\n\n    \n    function outofthemoney(time_, amount) {\n        var t = time_ / 30;\n        if (time < .2) {\n            return amount;\n        }\n        else {\n            return parseFloat(amount * (Math.E ** (-1.386294 * time_)));\n        }\n\n    }\n    function inthemoney(time_, amount) {\n        var t, p;\n        t = time_ / 30;\n        p = amount * t;\n        if (time_ > 30) {\n            return 0;\n        }\n        return parseFloat(amount - p);\n\n\n    }\n    function atthemoney(time_, amount) {\n        var amount;\n\n        if (time_ == 1 || time_ == 2 || time_ == 3) {\n            return amount;\n\n        } else if (time_ == 30) {\n            return 0;\n        } else if (time_ > 3 && time_ <= 7) {\n            return parseFloat(amount * (Math.E ** (-\t0.421442062631 * (time_ / 30))));\n        } else if (time_ > 7 && time_ <= 15) {\n            return parseFloat(amount * (Math.E ** (-\t0.621442062631 * (time_ / 30))));\n        } else if (time_ > 15 && time_ <= 23) {\n            return parseFloat(amount * (Math.E ** (-1.60517018599 * (time_ / 30))));\n        } else if (time_ > 23 && time_ <= 29) {\n            return parseFloat(amount * (Math.E ** (-2.60517018599 * (time_ / 30))));\n        }\n    }\n\n    function decayone(time_) {\n        return ((-3.9) * Math.sin((time_ - 2.2) / 1.4) - 2.9)\n    }\n\n    function gettimeremain(time_) {\n        var time = Date.now();\n        time = (time_ + epocmonth) - time;\n        time = time / epocday;\n        return Math.ceil(30 - time);\n    }\n\n    // function optionprice(strikeprice) {\n    //     return Math.round((strikeprice) * .10);\n    // }\n\n    function optionpricecalc(stockprice, strikeprice) {\n        return (stockprice - strikeprice) * 100;\n    }\n\n    /********************************************************* */\n\n    async function sellCall() {\n        var temtime = Date.now()\n        var oldstockprice \n        var expiretime\n        var x\n        var t\n        var timedecay\n        var optionprice\n        const message = window.confirm(\"Sell \" + props.ticker + \" \" + props.option + \" with strike price of $\" + props.strikePrice + \"?\");\n\n        if (message) {\n            try {\n                const currentUser = await Parse.User.current();\n                var balance = parseFloat(currentUser.get('balance'));\n                console.log(\"original balance\", balance);\n                const stockQuery = new Parse.Query('Options');\n\n                //Get clicked option's database data\n                stockQuery.equalTo('stockOwner', currentUser);\n                stockQuery.equalTo('stockName', props.ticker);\n                stockQuery.equalTo('initialOptionPrice', props.optionPrice);\n                stockQuery.equalTo('strikePrice', props.strikePrice);\n                stockQuery.equalTo('callOrPut', \"Call\");\n\n                const stockResult = await stockQuery.find();\n\n                if (stockResult.length == 0) {\n                    console.log(\"Option doesn't exist\")\n                }\n                else {\n                    //Gets the stock with the selected stock's expiration date\n\n                    //This operation is performed rather than the above \"equalTo\" functions\n                    //because props.expireDate is a string, whereas the expireDate in\n                    //Parse's database is an object\n                    for (let result in stockResult) {\n                        if (String(stockResult[result].get('expireDate')) == props.expireDate) {\n                            var stockObj = stockResult[result];\n                            expiretime = (stockResult[result].get('expireDate')).getTime()\n                            oldstockprice = stockResult[result].get('boughtPrice')\n                            x = expiretime - temtime; //amount of days that past\n                            t = x / epocday;\n                            t = Math.abs(30 - t)\n                            timedecay = (decayone(t / 30));\n                            optionprice = optionpricecalc(data.latestPrice, oldstockprice);\n                        }\n                    }\n\n                    try {\n                        var newBalance;\n\n                        //In, At, or Out of the money check\n                        if (data.latestPrice < props.strikePrice) { //in the money when stockprice is higher than strike\n                            console.log(\"In the money  \" + inthemoney(t / 30, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + inthemoney(t / 30, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance.toFixed(2)));\n                            console.log(\"balance\", newBalance);\n\n                        }\n                        else if\n                            ((data.latestPrice < props.strikePrice + 1) && (data.latestPrice > props.strikePrice - 1)) {\n                            console.log('At The Money ' + atthemoney(t, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + atthemoney(t, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance.toFixed(2)));\n                            console.log(\"balance\", newBalance);\n                        }\n                        else if (data.latestPrice > props.strikePrice) {\n                            console.log(\"Out of the Money \" + outofthemoney(t, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + outofthemoney(t, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance.toFixed(2)));\n                            console.log(\"balance\", newBalance);\n                        }\n\n                        else {\n                            newBalance = parseFloat(currentUser.get('balance'));\n                            currentUser.set('balance', parseFloat(newBalance.toFixed(2)));\n                        }\n\n                        console.log(\"old balance\", parseFloat(currentUser.get('balance')));\n\n                        try {\n                            stockObj.destroy();\n                            console.log('destroying the stock success!');\n\n                            try {\n                                console.log(\"saving new balance\");\n                                currentUser.save();\n                                setOptionsSold(!optionsSold);\n                            }\n                            catch (err) {\n                                console.log(\"Could not save sell option\");\n                            }\n                        } catch (err) {\n                            console.log(err.message);\n                        }\n                    } catch (err) {\n                        console.log(err.message);\n                    }\n                }\n            }\n            catch (err) {\n                console.log(\"Error selling call option\");\n            }\n        }\n\n        else {\n            return 0;\n        }\n    }\n\n    async function sellPut() {\n        var temtime = Date.now()\n        var oldstockprice \n        var expiretime\n        var x\n        var t\n        var timedecay\n        var optionprice\n\n        const message = window.confirm(\"Sell \" + props.ticker + \" \" + props.option + \" with strike price of $\" + props.strikePrice + \"?\");\n\n        if (message) {\n            try {\n                const currentUser = await Parse.User.current();\n                var balance = parseFloat(currentUser.get('balance'));\n                console.log(\"original balance\", balance);\n                const stockQuery = new Parse.Query('Options');\n\n                //Get clicked option's database data\n                stockQuery.equalTo('stockOwner', currentUser);\n                stockQuery.equalTo('stockName', props.ticker);\n                stockQuery.equalTo('initialOptionPrice', props.optionPrice);\n                stockQuery.equalTo('strikePrice', props.strikePrice);\n                stockQuery.equalTo('callOrPut', \"Put\");\n\n                const stockResult = await stockQuery.find();\n\n                if (stockResult.length == 0) {\n                    console.log(\"Option doesn't exist\")\n                }\n                else {\n                    //Gets the stock with the selected stock's expiration date\n\n                    //This operation is performed rather than the above \"equalTo\" functions\n                    //because props.expireDate is a string, whereas the expireDate in\n                    //Parse's database is an object\n                    for (let result in stockResult) {\n                        if (String(stockResult[result].get('expireDate')) == props.expireDate) {\n                            var stockObj = stockResult[result];\n                            expiretime = (stockResult[result].get('expireDate')).getTime()\n                            oldstockprice = stockResult[result].get('boughtPrice')\n                            x = expiretime - temtime; //amount of days that past\n                            t = x / epocday;\n                            t = Math.abs(30 - t)\n                            timedecay = (decayone(t / 30));\n                            optionprice = optionpricecalc(data.latestPrice, oldstockprice);\n                        }\n                    }\n\n                    try {\n                        var newBalance;\n\n                        //In, At, or Out of the money check\n                        if (data.latestPrice > props.optionPrice) { //in the money when stockprice is higher than strike\n                            console.log(\"In the money  \" + inthemoney(t / 30, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + inthemoney(t / 30, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance));\n                        }\n                        else if ((data.latestPrice < props.optionPrice + 1) && (data.latestPrice > props.optionPrice - 1)) {\n                            console.log('At The Money ' + atthemoney(t, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + atthemoney(t, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance));\n                            console.log(\"balance\", newBalance);\n                        }\n                        else if (data.latestPrice < props.optionPrice) {\n                            console.log(\"Out of the Money \" + outofthemoney(t, optionprice) * timedecay);\n                            newBalance = parseFloat(currentUser.get('balance')) + props.optionPrice + outofthemoney(t, optionprice) * timedecay;\n                            currentUser.set('balance', parseFloat(newBalance));\n                            console.log(\"balance\", newBalance);\n                        }\n                        console.log(\"old balance\", parseFloat(currentUser.get('balance')));\n                       \n                        try {\n                            stockObj.destroy();\n                            console.log('destroying the stock success!');\n\n                            try {\n                                console.log(\"saving new balance\");\n                                setOptionsSold(!optionsSold);\n                                currentUser.save();\n                            }\n                            catch (err) {\n                                console.log(\"Could not save sell option\");\n                            }\n                        } catch (err) {\n                            console.log(err.message);\n                        }\n                    } catch (err) {\n                        console.log(err.message);\n                    }\n                }\n            }\n            catch (err) {\n                console.log(\"Error selling call option\");\n            }\n        }\n    }\n\n    //Prompt to sell the selected option on row click\n    function handleClick() {\n        if (props.option == \"Call\") {sellCall();}\n        else if (props.option == \"Put\") {sellPut();}\n        else {return 0;}\n    }\n    \n    return (\n        <tr className=\"tabledesign\">\n            <td onDoubleClick={() => { handleClick() }} >\n                <Link to={{\n                    pathname: '/usermarketpage',\n                    state: { value: props.ticker }\n                }} className=\"cellcolor\"> {props.ticker} </Link>\n            </td>\n            <td onClick={() => { handleClick() }} className=\"numbers\" > ${props.priceBought} </td>\n            <td onClick={() => { handleClick() }} className=\"numbers\"> ${props.strikePrice} </td>\n            <td onClick={() => { handleClick() }} className=\"numbers\" > {props.option} </td>\n            <td onClick={() => { handleClick() }} className=\"numbers\"> {props.expireDate} </td>\n\n        </tr>\n    )\n\n}\n\nexport default OptionsRow;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport OptionsRow from \"./OptionsRow.js\";\nimport { useGlobalState } from '../GlobalState.js';\nimport \"./ProfilePage.css\";\nimport \"./MockData.css\";\n\n\nconst Parse = require('parse/node');\n\nfunction Options(props) {\n    const [clicked, setClicked] = useState(false);\n    const [sortOption, setSortOption] = useState('');\n    const [optionsSold, setOptionsSold] = useGlobalState('optionsSold');\n\n    //Data per option\n    const [stock, setStock] = useState([]);\n    const [strikePrice, setStrikePrice] = useState([]);\n    const [optionPrice, setOptionPrice] = useState([]);\n    const [priceBought, setPriceBought] = useState([])\n    const [optionChoice, setOptionChoice] = useState([]);\n    const [expireDate, setExpireDate] = useState([]);\n    const [balance, setBalance] = useState(null);\n\n\n    //Gets all the user's sellable options\n    async function getOptionsData() {\n        try {\n            const currentUser = await Parse.User.current();\n            setBalance(currentUser.get(\"balance\").toFixed(2));\n            const stockQuery = new Parse.Query('Options');\n            stockQuery.equalTo('stockOwner', currentUser);\n            const stockResult = await stockQuery.find();\n\n            //If no Queries are receieved then create a row for it\n            if (stockResult.length == 0) {\n                console.log(\"No options owned by user\")\n            }\n            else {\n\n                var stock_arr = [];\n                var strikePrice_arr = [];\n                var optionPrice_arr = [];\n                var priceBought_arr = [];\n                var optionChoice_arr = [];\n                var expireDate_arr = [];\n\n                //Get all option data rows\n                for (let result in stockResult) {\n                    stock_arr.push(stockResult[result].get('stockName'));\n                    strikePrice_arr.push(stockResult[result].get('strikePrice'));\n                    priceBought_arr.push(stockResult[result].get('boughtPrice'));\n                    optionPrice_arr.push(stockResult[result].get('initialOptionPrice'));\n                    optionChoice_arr.push(stockResult[result].get('callOrPut'));\n                    expireDate_arr.push(String(stockResult[result].get('expireDate')));\n\n                }\n\n                //Set option data rows to states\n                setStock(stock_arr);\n                setStrikePrice(strikePrice_arr);\n                setOptionPrice(optionPrice_arr);\n                setPriceBought(priceBought_arr);\n                setOptionChoice(optionChoice_arr);\n                setExpireDate(expireDate_arr);\n                setOptionsSold(!optionsSold);\n            }\n\n        }\n        catch (err) {\n            console.log(err);\n        }\n    }\n\n\n    function displayOptions() {\n        var optionsList = [];\n\n        if (stock.length == 0 || stock.length == null) {\n            return null;\n        }\n\n        else {\n            for (var i = 0; i < stock.length; i++) {\n                optionsList.push(<OptionsRow ticker={stock[i]}\n                    optionPrice={optionPrice[i]}\n                    priceBought={priceBought[i]}\n                    strikePrice={strikePrice[i]}\n                    option={optionChoice[i]}\n                    expireDate={expireDate[i]} />)\n            }\n            return optionsList;\n\n        }\n    }\n\n    useEffect(() => {\n        getOptionsData();\n        displayOptions();\n    }, [optionsSold]);\n\n    return (\n        <div className=\"options-container\">\n            <div>\n            <div className =\"user-greeting\"> \n                Current Balance is ${balance}\n            </div>\n            </div>\n            <h1 className=\"options-header\"> Your Options </h1>\n            <div className=\"titledesign\">  </div>\n            <table className=\"table\">\n                <thead>\n                    <tr className=\"chartdesign\">\n                        <th className=\"publicsans\"> TICKER </th>\n                        <th className=\"publicsans\"> PRICE BOUGHT </th>\n                        <th className=\"publicsans\"> STRIKE PRICE </th>\n                        <th className=\"publicsans\"> OPTION </th>\n                        <th className=\"publicsans\"> EXPIRATION DATE</th>\n                    </tr>\n                </thead>\n                <tbody className=\"tabledesign\">\n                    {displayOptions()}\n                </tbody>\n            </table>\n        </div>\n\n    );\n};\n\nexport default Options;","import { Link } from \"react-router-dom\";\nconst TransactionTableRow = ({transaction}) => {\n    // console.log(transaction)\n    return(\n        <tr className=\"chartdesign\"> \n        <td>{transaction.date}</td>\n        <td>{transaction.orderType}</td>\n        <td>{transaction.buySell}</td>\n        <td>{transaction.Effect}</td>\n        <td className=\"cellcolor\"> \n            <Link to={{\n                        pathname: '/usermarketpage',\n                        state: {value: transaction.Security}\n                    }} className=\"cellcolor\"> {transaction.Security} </Link> </td>\n        <td className=\"numbers\">{transaction.Amount}</td>\n        <td className=\"numbers\">{transaction.Price}</td>\n    </tr>\n    )\n}\n\n\n\nexport default TransactionTableRow","import TransactionTableRow from \"./TransactionTableRow\"\n\n\nconst TransactionTable = ({tHistory}) =>{\n    // console.log(tHistory)\n    \n    return(\n\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th className=\"publicsans\"> Time Placed </th>\n                    <th className=\"publicsans\"> Order Type </th>\n                    <th className=\"publicsans\"> Buy/Sell </th>\n                    <th className=\"publicsans\"> Effect </th>\n                    <th className=\"publicsans\"> Security </th>\n                    <th className=\"publicsans\"> Amount </th>\n                    <th className=\"publicsans\"> Price </th>\n                </tr>\n            </thead>\n            <tbody>\n\n                {tHistory.map((transaction, index) => (\n                    <TransactionTableRow key={index} transaction={transaction}/>\n                ))}\n                \n            </tbody>\n        </table>\n    )\n}\n\n\nexport default TransactionTable","import React, { useState } from \"react\"\nimport \"./TransactionHistoryFilters.css\"\n\n\nconst TransactionHistoryFilters = ({onFilter}) =>{\n\n    const [filterDeposit, setFilterDeposit] = useState(false)\n    const [filterWithdraw, setFilterWithdraw] = useState(false)\n    const [filterBuy, setFilterBuy] = useState(false)\n    const [filterSell, setFilterSell] = useState(false)\n    const [filterStock, setFilterStock] = useState(false)\n    const [filterStockText, setFilterStockText] = useState(\"\")\n\n\n    const onSubmit = (e) =>{\n        e.preventDefault()\n        \n        if(filterStock && filterStockText === \"\"){\n            alert(\"Please don't fortget to add a stock ticker\")\n            return\n        }\n\n        onFilter(filterDeposit, filterWithdraw, filterBuy, filterSell, filterStock, filterStockText)\n\n        setFilterDeposit(false)\n        setFilterWithdraw(false)\n        setFilterBuy(false)\n        setFilterSell(false)\n        setFilterStock(false)\n        setFilterStockText(\"\")\n    }\n\n    return(\n        <div> \n\n            <form className=\"filter-form\" onSubmit={onSubmit}>\n            <h2> Filters </h2>\n            <div className=\"filter-form-block\">\n                <div>\n                    <label> Deposits </label>\n                    < input type = \"checkbox\" value = {filterDeposit} \n                    onChange={(e) => setFilterDeposit(e.currentTarget.checked)}\n                    checked={filterDeposit}\n                    disabled={filterStock}\n                    />\n                </div>\n\n                <div>\n                    <label> Withdrawals </label>\n                    < input type = \"checkbox\" value = {filterWithdraw} \n                    onChange={(e) => setFilterWithdraw(e.currentTarget.checked)}\n                    checked={filterWithdraw}\n                    disabled={filterStock}\n                    />\n                </div>\n\n                <div>\n                    <label> Buy </label>\n                    < input type = \"checkbox\" value = {filterBuy} \n                    onChange={(e) => setFilterBuy(e.currentTarget.checked)}\n                    checked={filterBuy}\n                    />\n                </div>\n\n                <div>\n                    <label> Sell </label>\n                    < input type = \"checkbox\" value = {filterSell} \n                    onChange={(e) => setFilterSell(e.currentTarget.checked)}\n                    checked={filterSell}\n                        />\n                </div>\n\n            </div>   \n            <div className=\"filter-form-block-stock\">\n                <div>\n                    <label> Stock </label>\n                    < input type = \"checkbox\" value = {filterStock} \n                    onChange={(e) => {\n                        setFilterStock(e.currentTarget.checked)\n                        setFilterWithdraw(false)\n                        setFilterDeposit(false)\n                        setFilterStockText(\"\")\n                    }\n                     }\n                     checked={filterStock}\n                     />\n                </div>\n\n                {filterStock && <div>\n                    <label> Name of Stock </label>\n                    < input type = \"text\" placeholder=\"Input the stock's ticker symbol\" value={filterStockText}\n                    onChange={(e) => setFilterStockText(e.target.value)}/>\n                </div>}\n\n            </div>  \n\n                <input type = \"submit\" value = \"Filter History\"></input> \n\n            </form>\n        </div>\n    )\n}\n\nexport default TransactionHistoryFilters","import React, { useState, useEffect } from 'react'\nimport TransactionTable from './TransactionHistoryComponents/TransactionTable';\nimport TransactionHistoryFilters from './TransactionHistoryComponents/TransactionHistoryFilters';\nconst Parse = require('parse/node');\n\nconst TransactionHistoryPage = () => {\n    const [tHistory, setTHistory] = useState([]);\n    const [fullTHistory, setFullTHistory] = useState([]);\n\n    useEffect(() => { \n      const getTHistory = async () => {\n          const data = await fetchTHistory()\n          setTHistory(data)\n          setFullTHistory(data)\n      }\n      getTHistory()\n    }, [])\n  \n    const fetchTHistory = async() =>{\n  \n      var retArr = []\n\n      const Owner = await Parse.User.current();\n    \n      //Get all stocks owned by user\n      const historyQuery = new Parse.Query('Order');\n      historyQuery.equalTo('account', Owner);\n      let queryResults = await historyQuery.find();\n    \n      for (let result of queryResults) {\n    \n      const tDate = result.get(\"transDate\").toString()\n      const tAmount = result.get(\"amount\")\n      const tSecurity = result.get(\"ticker\")\n      var tprice = result.get(\"price\")\n      \n    \n      const is_Stock = result.get('isStockOperation');\n      const eff = result.get('isOpenPos');\n    \n      var orderType = \"\"\n      var tEffect = \"\"\n      var buySell = \"\"\n    \n    \n      if(is_Stock){\n        orderType = \"Stock\"\n        if(eff)\n          tEffect = \"Open\"\n        else\n          tEffect = \"Close\"\n      }\n      else if(eff){\n        orderType = \"Deposit\"\n        tprice = \"\"\n      }\n      else if(!eff){\n        orderType = \"Withdrawl\"\n        tprice = \"\"\n      }\n      else{\n        orderType = \"---\"\n        tEffect = \"---\"\n      }\n    \n      if(orderType === \"Stock\"){\n        if(result.get(\"isBuy\"))\n          buySell = \"Buy\"\n       else\n         buySell = \"Sell\"\n      }\n  \n    \n    \n      // console.log(tDate)\n      // console.log(tAmount)\n      // console.log(tSecurity)\n      // console.log(tprice)\n      // console.log(orderType)\n      // console.log(tEffect)\n      // console.log(buySell)\n  \n      const transaction = {\n        date: tDate,\n        orderType: orderType,\n        buySell: buySell,\n        Effect: tEffect,\n        Security: tSecurity,\n        Amount: tAmount,\n        Price: tprice\n      }\n      \n      retArr.push(transaction)\n  \n    }\n  \n      return retArr\n    \n    }\n\n\n    const FilterTHistory = (filterDeposit, filterWithdraw, filterBuy, filterSell, filterStock, stockText) => {\n\n      var newHistory = []\n    \n      if((filterDeposit && filterWithdraw && filterBuy && filterSell) \n      || (!filterDeposit && !filterWithdraw && !filterBuy && !filterSell &&!filterStock)){\n        setTHistory(fullTHistory)\n      }\n  \n      else{\n  \n        if(filterDeposit){\n          newHistory = [...newHistory, ...fullTHistory.filter((transaction) => transaction.orderType ===  \"Deposit\")]\n        }\n  \n        if(filterWithdraw){\n          newHistory = [...newHistory, ...fullTHistory.filter((transaction) => transaction.orderType ===  \"Withdrawl\")]\n        }\n  \n        if(filterBuy){\n          newHistory = [...newHistory, ...fullTHistory.filter((transaction) => transaction.buySell ===  \"Buy\")]\n        }\n  \n        if(filterSell){\n          newHistory = [...newHistory, ...fullTHistory.filter((transaction) => transaction.buySell ===  \"Sell\")]\n        }\n        \n        if(filterStock){\n          if(filterBuy || filterSell){\n            newHistory = newHistory.filter((transaction) => transaction.Security === stockText.toUpperCase())\n          }\n          else{\n            newHistory = fullTHistory.filter((transaction) => transaction.Security === stockText.toUpperCase())\n          }\n        }\n\n        setTHistory(newHistory)\n      }\n\n    }\n  \n  \n  \n    return (\n      <div className=\"profile-container\">\n          <h1>Transaction History</h1>\n          <TransactionHistoryFilters onFilter = {FilterTHistory}/>\n          {tHistory.length > 0 ? <TransactionTable tHistory = {tHistory}/> : \"No History To Show\"}\n      </div>\n    );\n}\n\n  \nexport default TransactionHistoryPage\n","import \"./RedditPage.css\"\nconst FeedItem = ({post}) =>{\n    \n    //console.log(post.link)\n    //Each post should be formatted as follows:\n    // Post{\n    //     link: (\"https://www.reddit.com\" + post.permalink),\n    //     post_domain: post.domain,\n    //     post_url: post.url,\n    //     title: post.title,\n    //     body: post.selftext,\n    //     media: post.media,\n    //     is_video: post.is_video,\n    //     post_hint: post.post_hint,\n    //   }\n\n\n\n\n\n    return(\n        <div className = \"itemcontainer\">\n            <a href = {post.link} style={{textAlign:\"left\"}}> Link To Post </a>\n            <h1 style={{textAlign:\"left\"}}> {post.title} </h1>\n            <p>{post.body}</p>\n            {post.post_hint === \"image\" && \n            <div className=\"redditimage\">\n            <img src={post.post_url} width=\"500\" height =\"500\" alt=\"\"/> \n            </div>}\n            {post.is_video && \n            <video id=\"video_player\" src={post.media.reddit_video.fallback_url} width=\"500\" height =\"500\" controls />\n\n             }\n        </div>\n    )\n}\n\nexport default FeedItem","import FeedItem from \"./FeedItem\"\n\nconst RedditFeed = ({postArray}) => {\n\n    // PostArray Should Be Formatted as follows:\n    // PostArray{\n    //     link: (\"https://www.reddit.com\" + post.permalink),\n    //     post_domain: post.domain,\n    //     post_url: post.url,\n    //     title: post.title,\n    //     body: post.selftext,\n    //     media: post.media,\n    //     is_video: post.is_video,\n    //     post_hint: post.post_hint,\n    //   }\n\n\n    return(\n        <div>\n            {postArray.map((post, index) => (\n                <FeedItem key = {index} post = {post}/>\n            ))}\n        </div>\n\n    );\n\n}\n\nexport default RedditFeed;","import React, { useState } from \"react\"\nimport DButton from \"../DButton\"\nimport \"./RedditPage.css\"\n\n\nconst RedditFeedFilters = ({OnSearch, OnHot, OnNew, OnTop}) =>{\n\n    const [searchText, setSearchText] = useState(\"\")\n\n    const onSubmit = (e) =>{\n        e.preventDefault()\n\n        if(!searchText){\n            alert(\"Please type in Search\")\n            return\n        }\n\n        OnSearch(searchText)\n\n        setSearchText(\"\")\n    }\n\n    return(\n        <div className = \"filtercontainer\">\n            <form className=\"add-form\" onSubmit={onSubmit}>\n                <div className = \"form-control\">\n                    <label> Search through r/WallStreetBets </label>\n                    <input\n                        type = \"text\"\n                        placeholder = \"Search for a stock\"\n                        value = {searchText}\n                        onChange={(e) => setSearchText(e.target.value)}\n                    />\n                </div>\n\n                <input type='submit' value='Search' className='Dbtn btn-block' />\n            </form>\n            <div>\n                <DButton color =\"red\" text=\"Hot\" onClick = {OnHot}/>\n                <DButton color =\"blue\" text=\"New\" onClick = {OnNew}/>\n                <DButton color =\"green\" text=\"Top Monthly\" onClick = {OnTop}/>\n            </div>\n\n        </div>\n        \n    )\n}\n\nexport default RedditFeedFilters","import React, { useState, useEffect } from 'react';\nimport RedditFeed from './RedditPageComponents/RedditFeed';\nimport RedditFeedFilters from './RedditPageComponents/RedditFeedFilters';\nimport \"./RedditPageComponents/RedditPage.css\"\nconst snoowrap = require (\"snoowrap\")\n\nfunction RedditPage() {\n\n  const [uAgent, setUAgent] = useState(\"\")\n  const [postsArray, setPostsArray] = useState([])\n\n  useEffect (()=>{\n    const random_num = generateRandomString()\n    console.log(\"my random string is: \", random_num)\n    setUAgent(random_num)\n    getTop()\n  },[])\n\n\n  const generateRandomString = function(length=16){\n    return Math.random().toString(20).substr(2, length)\n  }\n\n  const getNew = async() =>{\n    console.log(\"scope: GetNew\")\n    const r = new snoowrap({\n      userAgent: uAgent,\n      clientId: 'gCHVXjyHJ2Cd4UegdeBZfA',\n      clientSecret: 'Ocujd7XhNtTHgG4TW3HFrDq8PKi4_Q',\n      refreshToken: '1353206505591-fAP1B3k2vHc5d0tuNXv6Wpbl4fq_BA'\n    })\n  \n    const subreddit = await r.getSubreddit('wallstreetbets');\n    const NewPosts = await subreddit.getNew({limit: 10});\n  \n    let data = [];\n  \n    NewPosts.forEach((post) => {\n  \n      //console.log(post)\n      data.push({\n        link: (\"https://www.reddit.com\" + post.permalink),\n        post_domain: post.domain,\n        post_url: post.url,\n        title: post.title,\n        body: post.selftext,\n        media: post.media,\n        is_video: post.is_video,\n        post_hint: post.post_hint,\n      })\n    });\n    \n    //console.log(data);\n    setPostsArray(data)\n  \n  }\n\n\nconst getHot = async() =>{\n  console.log(\"scope: GetHot\")\n  const r = new snoowrap({\n    userAgent: uAgent,\n    clientId: 'gCHVXjyHJ2Cd4UegdeBZfA',\n    clientSecret: 'Ocujd7XhNtTHgG4TW3HFrDq8PKi4_Q',\n    refreshToken: '1353206505591-fAP1B3k2vHc5d0tuNXv6Wpbl4fq_BA'\n  })\n\n  const subreddit = await r.getSubreddit('wallstreetbets');\n  const hotPosts = await subreddit.getHot({limit: 10});\n\n  let data = [];\n\n  hotPosts.forEach((post) => {\n\n    //console.log(post)\n    data.push({\n      link: (\"https://www.reddit.com\" + post.permalink),\n      post_domain: post.domain,\n      post_url: post.url,\n      title: post.title,\n      body: post.selftext,\n      media: post.media,\n      is_video: post.is_video,\n      post_hint: post.post_hint,\n    })\n  });\n  \n  //console.log(data);\n  setPostsArray(data)\n\n}\n\n\nconst getTop = async() =>{\n  console.log(\"scope: GetTop\")\n  const r = new snoowrap({\n    userAgent: uAgent,\n    clientId: 'gCHVXjyHJ2Cd4UegdeBZfA',\n    clientSecret: 'Ocujd7XhNtTHgG4TW3HFrDq8PKi4_Q',\n    refreshToken: '1353206505591-fAP1B3k2vHc5d0tuNXv6Wpbl4fq_BA'\n  })\n\n  const subreddit = await r.getSubreddit('wallstreetbets');\n  const topPosts = await subreddit.getTop({time:\"month\", limit: 10});\n\n  let data = [];\n\n  topPosts.forEach((post) => {\n\n    //console.log(post)\n    data.push({\n      link: (\"https://www.reddit.com\" + post.permalink),\n      post_domain: post.domain,\n      post_url: post.url,\n      title: post.title,\n      body: post.selftext,\n      media: post.media,\n      is_video: post.is_video,\n      post_hint: post.post_hint,\n    })\n  });\n  \n  //console.log(data);\n  setPostsArray(data)\n\n}\n\nconst getSearch = async(searchText) =>{\n  const r = new snoowrap({\n    userAgent: uAgent,\n    clientId: 'gCHVXjyHJ2Cd4UegdeBZfA',\n    clientSecret: 'Ocujd7XhNtTHgG4TW3HFrDq8PKi4_Q',\n    refreshToken: '1353206505591-fAP1B3k2vHc5d0tuNXv6Wpbl4fq_BA'\n  })\n\n  const subreddit = await r.getSubreddit('wallstreetbets');\n  const topPosts = await subreddit.search({query: searchText, limit: 10});\n\n  let data = [];\n\n  topPosts.forEach((post) => {\n\n    //console.log(post)\n    data.push({\n      link: (\"https://www.reddit.com\" + post.permalink),\n      post_domain: post.domain,\n      post_url: post.url,\n      title: post.title,\n      body: post.selftext,\n      media: post.media,\n      is_video: post.is_video,\n      post_hint: post.post_hint,\n    })\n  });\n  \n  //console.log(data);\n  setPostsArray(data)\n\n\n}\n\n\n\n  return (\n    <div >\n        <RedditFeedFilters OnSearch={getSearch} OnHot={getHot} OnNew={getNew} OnTop={getTop}/>\n        <RedditFeed postArray = {postsArray}/>\n    </div>\n  );\n}\n\nexport default RedditPage;\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport React, { Component, useState } from 'react';\nimport Home from './components/pages/Home';\nimport Login from './components/Login_and_Register/Login';\nimport Register from './components/Login_and_Register/Register';\nimport Aboutus from './components/pages/Aboutus';\nimport MarketData from './components/pages/MarketData';\nimport Footer from './components/Footer';\nimport ProfilePage from './components/pages/ProfilePage';\nimport Usermarketpage from './components/pages/usermarketpage';\nimport Options from './components/pages/Options';\nimport TransactionHistoryPage from './components/pages/TransactionHistoryPage';\nimport RedditPage from './components/pages/RedditPage';\n\nconst Parse = require('parse/node');\nconst PARSE_APPLICATION_ID = 'dVAtpphyTkgy21u2aW8Z05uynBQk1jgHwZgGh7Ma';\nconst PARSE_HOST_URL = 'https://parseapi.back4app.com/';\nconst PARSE_JAVASCRIPT_KEY = 'NsPwPQHboezOraPomemoflQtu6oHDHSUZOZyN9cM';\nParse.initialize(PARSE_APPLICATION_ID, PARSE_JAVASCRIPT_KEY);\nParse.serverURL = PARSE_HOST_URL;\n\nfunction App(props) {\n    return (\n      <React.Fragment>\n      <Router basename={process.env.PUBLIC_URL}>\n         <Navbar />\n           <Switch>\n             <Route path='/' exact component={Home} />\n             <Route path='/login' exact component={Login} />\n             <Route path='/register' exact component={Register} />\n             <Route path='/aboutus' exact component={Aboutus} />\n             <Route path='/market' exact component={MarketData} />\n             <Route path='/profile' exact component={ProfilePage} />\n             <Route path='/usermarketpage' exact component={Usermarketpage} />\n             <Route path='/options' exact component={Options} />\n             <Route path='/history' exact component={TransactionHistoryPage} />\n             <Route path='/reddit' exact component={RedditPage} />\n            </Switch> \n         <Footer />\n      </Router>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}